{
    "docs": [
        {
            "location": "/", 
            "text": "MsgPHP Documentation\n\n\n\n\nMsgPHP\n is a project that aims to provide (common) message based domain layers for your application. It has a low development time overhead and avoids being overly opinionated.", 
            "title": "Home"
        }, 
        {
            "location": "/#msgphp-documentation", 
            "text": "MsgPHP  is a project that aims to provide (common) message based domain layers for your application. It has a low development time overhead and avoids being overly opinionated.", 
            "title": "MsgPHP Documentation"
        }, 
        {
            "location": "/code-conventions/", 
            "text": "Code Conventions\n\n\nA brief description of code conventions this project follows.\n\n\nGeneral Principles\n\n\n\n\nFollows \nSOLID\n principles\n\n\nReduce \nlines of code\n where possible\n\n\nReduce coupling (\nLaw of Demeter\n)\n\n\nFavor latest stable PHP7 features\n\n\nChecks must pass (code style, static analysis \n unit tests)\n\n\n\n\nCode Style (CS)\n\n\n\n\nFollows \nPSR-2\n with \nSymfony Style\n\n\nuse\n statements are declared in alpha-order\n\n\nuse\n statements for \nMsgPhp\\\n namespace are grouped by deepest common namespace\n\n\n\n\n?php\n\n\n\n// wrong\n\n\n\nuse\n \nMsgPhp\\SomeB\n;\n\n\nuse\n \nMsgPhp\\SomeA\n;\n\n\nuse\n \nMsgPhp\\Some\\SomeC\n;\n\n\nuse\n \nOther\\SomeOtherB\n;\n\n\nuse\n \nOther\\Some\\SomeOtherC\n;\n\n\nuse\n \nOther\\SomeOtherA\n;\n\n\n\n// right\n\n\n\nuse\n \nMsgPhp\\Some\\SomeC\n;\n\n\nuse\n \nMsgPhp\\\n{\nSomeA\n,\n \nSomeB\n};\n\n\nuse\n \nOther\\Some\\SomeOtherC\n;\n\n\nuse\n \nOther\\SomeOtherA\n;\n\n\nuse\n \nOther\\SomeOtherB\n;\n\n\n\n\n\n\nStatic Analysis (SA)\n\n\n\n\nFollows \nPHPStan\n level max\n\n\nExclude- and ignore-rules are discussed per case / topic\n\n\n\n\nPHPDoc\n\n\n\n\nAdd comments if needed for either clarification or static analysis (might result in e.g. partial \n@param\n annotations)\n\n\nInline \n@var\n annotations (\n/** @var Some $some*/\n)\n\n\nInterfaces must have a description with its purpose (at the class- as well as the method-level)\n\n\nNo usage of \n@inheritdoc\n\n\n\n\nPHP 7.2 Forward Compatibility\n\n\n\n\nIntended object values are type hinted (\n@param object $value\n and \n@return object\n)\n\n\n\n\nUnit Tests\n\n\n\n\nAll of the above, \nin general\n, apply to unit tests as well", 
            "title": "Code Conventions"
        }, 
        {
            "location": "/code-conventions/#code-conventions", 
            "text": "A brief description of code conventions this project follows.", 
            "title": "Code Conventions"
        }, 
        {
            "location": "/code-conventions/#general-principles", 
            "text": "Follows  SOLID  principles  Reduce  lines of code  where possible  Reduce coupling ( Law of Demeter )  Favor latest stable PHP7 features  Checks must pass (code style, static analysis   unit tests)", 
            "title": "General Principles"
        }, 
        {
            "location": "/code-conventions/#code-style-cs", 
            "text": "Follows  PSR-2  with  Symfony Style  use  statements are declared in alpha-order  use  statements for  MsgPhp\\  namespace are grouped by deepest common namespace   ?php  // wrong  use   MsgPhp\\SomeB ;  use   MsgPhp\\SomeA ;  use   MsgPhp\\Some\\SomeC ;  use   Other\\SomeOtherB ;  use   Other\\Some\\SomeOtherC ;  use   Other\\SomeOtherA ;  // right  use   MsgPhp\\Some\\SomeC ;  use   MsgPhp\\ { SomeA ,   SomeB };  use   Other\\Some\\SomeOtherC ;  use   Other\\SomeOtherA ;  use   Other\\SomeOtherB ;", 
            "title": "Code Style (CS)"
        }, 
        {
            "location": "/code-conventions/#static-analysis-sa", 
            "text": "Follows  PHPStan  level max  Exclude- and ignore-rules are discussed per case / topic", 
            "title": "Static Analysis (SA)"
        }, 
        {
            "location": "/code-conventions/#phpdoc", 
            "text": "Add comments if needed for either clarification or static analysis (might result in e.g. partial  @param  annotations)  Inline  @var  annotations ( /** @var Some $some*/ )  Interfaces must have a description with its purpose (at the class- as well as the method-level)  No usage of  @inheritdoc", 
            "title": "PHPDoc"
        }, 
        {
            "location": "/code-conventions/#php-72-forward-compatibility", 
            "text": "Intended object values are type hinted ( @param object $value  and  @return object )", 
            "title": "PHP 7.2 Forward Compatibility"
        }, 
        {
            "location": "/code-conventions/#unit-tests", 
            "text": "All of the above,  in general , apply to unit tests as well", 
            "title": "Unit Tests"
        }, 
        {
            "location": "/ddd/identifiers/", 
            "text": "Identifiers\n\n\nA domain identifier is a \nstring-able\n value object and bound to \nMsgPhp\\Domain\\DomainIdInterface\n. Its purpose is to\nutilize a primitive identifier value.\n\n\n\n\nNote\n\n\nSee the \nreference\n page for all available identifiers provided per domain\n\n\n\n\nAPI\n\n\nExtends\n\n\n\n\n\\Serializable\n\n\n\\JsonSerializable\n\n\n\n\n\n\nstatic fromValue($value): DomainIdInterface\n\n\nReturns a factorized identifier from any primitive value. Using \nnull\n might imply an empty identifier.\n\n\n\n\nisEmpty(): bool\n\n\nTells if an identifier value is considered empty, thus has no known primitive value.\n\n\n\n\nequals(DomainIdInterface $id): bool\n\n\nTells if an identifier equals another identifier.\n\n\n\n\ntoString(): string\n / \n__toString(): string\n\n\nReturns the identifier its primitive string value. If the identifier is empty (see \nisEmpty()\n) an empty string (\n\"\"\n) \nshould be returned.\n\n\nImplementations\n\n\nMsgPhp\\Domain\\DomainId\n\n\nA first class citizen domain identifier. It leverages \nstring|null\n as underlying data type.\n\n\n\n\n__construct(string $id = null)\n\n\n$id\n: The primitive identifier value. In case of \nnull\n an empty identifier is implied.\n\n\n\n\n\n\n\n\nBasic Example\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\DomainId\n;\n\n\n\n// --- SETUP ---\n\n\n\nclass\n \nOtherDomainId\n \nextends\n \nDomainId\n\n\n{\n\n\n}\n\n\n\n$emptyId\n \n=\n \nnew\n \nDomainId\n();\n\n\n$id\n \n=\n \nnew\n \nDomainId\n(\n1\n);\n\n\n\n// --- USAGE ---\n\n\n\n$emptyId\n-\nisEmpty\n();\n \n// true\n\n\n$id\n-\nisEmpty\n();\n \n// false\n\n\n\n$emptyId\n-\nequals\n(\n$emptyId\n);\n \n// true\n\n\n$emptyId\n-\nequals\n(\nnew\n \nDomainId\n());\n \n// false\n\n\n$id\n-\nequals\n(\nnew\n \nDomainId\n(\n1\n));\n \n// true\n\n\n$id\n-\nequals\n(\nnew\n \nOtherDomainId\n(\n1\n));\n \n// false due type varying\n\n\n\n$emptyId\n-\ntoString\n();\n \n// \n\n\n(\nstring\n)\n \n$id\n;\n \n// \n1\n\n\n\n$emptyStringId\n \n=\n \nnew\n \nDomainId\n(\n);\n\n\n$emptyStringId\n-\nisEmpty\n()\n \n?\n \nnull\n \n:\n \n$emptyStringId\n-\ntoString\n();\n \n// \n\n\n$emptyId\n-\nisEmpty\n()\n \n?\n \nnull\n \n:\n \n$emptyId\n-\ntoString\n();\n \n// null\n\n\n\n\n\n\nMsgPhp\\Domain\\Infra\\Uuid\\DomainId\n\n\nA UUID tailored domain identifier.\n\n\n\n\nRead more", 
            "title": "Identifiers"
        }, 
        {
            "location": "/ddd/identifiers/#identifiers", 
            "text": "A domain identifier is a  string-able  value object and bound to  MsgPhp\\Domain\\DomainIdInterface . Its purpose is to\nutilize a primitive identifier value.   Note  See the  reference  page for all available identifiers provided per domain", 
            "title": "Identifiers"
        }, 
        {
            "location": "/ddd/identifiers/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/ddd/identifiers/#extends", 
            "text": "\\Serializable  \\JsonSerializable", 
            "title": "Extends"
        }, 
        {
            "location": "/ddd/identifiers/#static-fromvaluevalue-domainidinterface", 
            "text": "Returns a factorized identifier from any primitive value. Using  null  might imply an empty identifier.", 
            "title": "static fromValue($value): DomainIdInterface"
        }, 
        {
            "location": "/ddd/identifiers/#isempty-bool", 
            "text": "Tells if an identifier value is considered empty, thus has no known primitive value.", 
            "title": "isEmpty(): bool"
        }, 
        {
            "location": "/ddd/identifiers/#equalsdomainidinterface-id-bool", 
            "text": "Tells if an identifier equals another identifier.", 
            "title": "equals(DomainIdInterface $id): bool"
        }, 
        {
            "location": "/ddd/identifiers/#tostring-string-__tostring-string", 
            "text": "Returns the identifier its primitive string value. If the identifier is empty (see  isEmpty() ) an empty string ( \"\" ) \nshould be returned.", 
            "title": "toString(): string / __toString(): string"
        }, 
        {
            "location": "/ddd/identifiers/#implementations", 
            "text": "", 
            "title": "Implementations"
        }, 
        {
            "location": "/ddd/identifiers/#msgphpdomaindomainid", 
            "text": "A first class citizen domain identifier. It leverages  string|null  as underlying data type.   __construct(string $id = null)  $id : The primitive identifier value. In case of  null  an empty identifier is implied.", 
            "title": "MsgPhp\\Domain\\DomainId"
        }, 
        {
            "location": "/ddd/identifiers/#basic-example", 
            "text": "?php  use   MsgPhp\\Domain\\DomainId ;  // --- SETUP ---  class   OtherDomainId   extends   DomainId  {  }  $emptyId   =   new   DomainId ();  $id   =   new   DomainId ( 1 );  // --- USAGE ---  $emptyId - isEmpty ();   // true  $id - isEmpty ();   // false  $emptyId - equals ( $emptyId );   // true  $emptyId - equals ( new   DomainId ());   // false  $id - equals ( new   DomainId ( 1 ));   // true  $id - equals ( new   OtherDomainId ( 1 ));   // false due type varying  $emptyId - toString ();   //   ( string )   $id ;   //  1  $emptyStringId   =   new   DomainId ( );  $emptyStringId - isEmpty ()   ?   null   :   $emptyStringId - toString ();   //   $emptyId - isEmpty ()   ?   null   :   $emptyId - toString ();   // null", 
            "title": "Basic Example"
        }, 
        {
            "location": "/ddd/identifiers/#msgphpdomaininfrauuiddomainid", 
            "text": "A UUID tailored domain identifier.   Read more", 
            "title": "MsgPhp\\Domain\\Infra\\Uuid\\DomainId"
        }, 
        {
            "location": "/ddd/identities/", 
            "text": "Identities\n\n\nMsgPhp\\Domain\\DomainIdentityHelper\n is a utility domain service. Its purpose is to ease working with domain identities\nand the \nidentity mapping\n.\n\n\nA domain identity is a composite value (\narray\n) of one or more individual identifier values, indexed by an identifier\nfield name. Its usage is to uniquely identify a domain object, thus qualifying it an entity object.\n\n\nIdentifier values can be of any type; a \ndomain identifier\n, another (foreign) entity object, or any\nprimitive value.\n\n\nA single identifier value might represent an identity in case the identity is composed from a single identifier field.\n\n\nAPI\n\n\nisIdentifier($value): bool\n\n\nTells if \n$value\n is a known identifier value. This is either a \ndomain identifier\n object or an entity\nobject.\n\n\n\n\nisEmptyIdentifier($value): bool\n\n\nTells if \n$value\n is a known empty identifier value. It returns \ntrue\n if the specified value is either \nnull\n, an empty\n\ndomain identifier\n or an entity object without its identity set.\n\n\n\n\nnormalizeIdentifier($value)\n\n\nReturns the primitive identifier value of \n$value\n. Empty identifier values (see \nisEmptyIdentifier()\n) are normalized\nas \nnull\n, a \ndomain identifier\n as string value and an entity object as normalized identity value.\nA value of any other type is returned as is.\n\n\n\n\ngetIdentifiers(object $object): array\n\n\nReturns the actual identifier values of \n$object\n.\n\n\n\n\ngetIdentifierFieldNames(string $class): array\n\n\nReturns the identifier field names for \n$class\n. Any instance should have an identity composed of these field values.\nSee also \nDomainIdentityMappingInterface::getIdentifierFieldNames()\n.\n\n\n\n\nisIdentity(string $class, $value): bool\n\n\nTells if \n$value\n is a valid identity for type \n$class\n. An identity value is considered valid if an entity object uses\na single identifier value as identity and \n$value\n is a non empty identifier (see \nisEmptyIdentifier()\n).\n\n\nIn case of one or more identifier values, given in the form of an array, its keys must exactly match the available\nidentifier field names and its values must contain no empty identifiers.\n\n\n\n\ntoIdentity(string $class, $value): array\n\n\nReturns a composite identity value for \n$class\n from \n$value\n.\n\n\n\n\ngetIdentity(object $object): array\n\n\nReturns the actual, non empty, identifier values of \n$object\n. Each identifier value is keyed by its corresponding\nidentifier field name. See also \nDomainIdentityMappingInterface::getIdentity()\n.\n\n\nBasic Example\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\\n{\nDomainId\n,\n \nDomainIdentityHelper\n};\n\n\nuse\n \nMsgPhp\\Domain\\Infra\\InMemory\\DomainIdentityMapping\n;\n\n\n\n// --- SETUP ---\n\n\n\nclass\n \nMyEntity\n\n\n{\n\n    \npublic\n \n$id\n;\n\n\n}\n\n\n\nclass\n \nMyCompositeEntity\n\n\n{\n\n    \npublic\n \n$name\n;\n\n    \npublic\n \n$year\n;\n\n\n}\n\n\n\n$helper\n \n=\n \nnew\n \nDomainIdentityHelper\n(\nnew\n \nDomainIdentityMapping\n([\n\n   \nMyEntity\n::\nclass\n \n=\n \nid\n,\n\n   \nMyCompositeEntity\n::\nclass\n \n=\n \n[\nname\n,\n \nyear\n],\n\n\n]));\n\n\n\n// --- USAGE ---\n\n\n\n$entity\n \n=\n \nnew\n \nMyEntity\n();\n\n\n$entity\n-\nid\n \n=\n \nnew\n \nDomainId\n(\n1\n);\n\n\n\n$compositeEntity\n \n=\n \nnew\n \nMyCompositeEntity\n();\n\n\n$compositeEntity\n-\nname\n \n=\n \n...\n;\n\n\n$compositeEntity\n-\nyear\n \n=\n \n...\n;\n\n\n\n$helper\n-\nisIdentity\n(\n1\n);\n \n// false\n\n\n$helper\n-\nisIdentity\n(\nnew\n \nDomainId\n(\n1\n));\n \n// true\n\n\n$helper\n-\nisIdentity\n(\n$entity\n);\n \n// true\n\n\n\n$helper\n-\nnormalizeIdentifier\n(\nnew\n \nDomainId\n());\n \n// null\n\n\n$helper\n-\nnormalizeIdentifier\n(\nnew\n \nDomainId\n(\n1\n));\n \n// \n1\n\n\n$helper\n-\nnormalizeIdentifier\n(\n1\n);\n \n// \n1\n\n\n$helper\n-\nnormalizeIdentifier\n(\n$entity\n);\n \n// \n1\n\n\n$helper\n-\nnormalizeIdentifier\n(\n$compositeEntity\n);\n \n// [\nname\n =\n ..., \nyear\n =\n ....]\n\n\n\n$helper\n-\ngetIdentifiers\n(\n$entity\n);\n \n// [\nid\n]\n\n\n$helper\n-\ngetIdentifiers\n(\n$compositeEntity\n);\n \n// [\nname\n, \nyear\n]\n\n\n\n$helper\n-\nisIdentity\n(\nMyEntity\n::\nclass\n,\n \n1\n);\n \n// true\n\n\n$helper\n-\nisIdentity\n(\nMyCompositeEntity\n::\nclass\n,\n \n1\n);\n \n// false\n\n\n$helper\n-\nisIdentity\n(\nMyCompositeEntity\n::\nclass\n,\n \n[\nname\n \n=\n \n...\n]);\n \n// false\n\n\n$helper\n-\nisIdentity\n(\nMyCompositeEntity\n::\nclass\n,\n \n[\nname\n \n=\n \n...\n,\n \nyear\n \n=\n \n...\n]);\n \n// true\n\n\n\n$helper\n-\ntoIdentity\n(\nMyEntity\n::\nclass\n,\n \n1\n);\n \n// [\nid\n =\n 1]", 
            "title": "Identities"
        }, 
        {
            "location": "/ddd/identities/#identities", 
            "text": "MsgPhp\\Domain\\DomainIdentityHelper  is a utility domain service. Its purpose is to ease working with domain identities\nand the  identity mapping .  A domain identity is a composite value ( array ) of one or more individual identifier values, indexed by an identifier\nfield name. Its usage is to uniquely identify a domain object, thus qualifying it an entity object.  Identifier values can be of any type; a  domain identifier , another (foreign) entity object, or any\nprimitive value.  A single identifier value might represent an identity in case the identity is composed from a single identifier field.", 
            "title": "Identities"
        }, 
        {
            "location": "/ddd/identities/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/ddd/identities/#isidentifiervalue-bool", 
            "text": "Tells if  $value  is a known identifier value. This is either a  domain identifier  object or an entity\nobject.", 
            "title": "isIdentifier($value): bool"
        }, 
        {
            "location": "/ddd/identities/#isemptyidentifiervalue-bool", 
            "text": "Tells if  $value  is a known empty identifier value. It returns  true  if the specified value is either  null , an empty domain identifier  or an entity object without its identity set.", 
            "title": "isEmptyIdentifier($value): bool"
        }, 
        {
            "location": "/ddd/identities/#normalizeidentifiervalue", 
            "text": "Returns the primitive identifier value of  $value . Empty identifier values (see  isEmptyIdentifier() ) are normalized\nas  null , a  domain identifier  as string value and an entity object as normalized identity value.\nA value of any other type is returned as is.", 
            "title": "normalizeIdentifier($value)"
        }, 
        {
            "location": "/ddd/identities/#getidentifiersobject-object-array", 
            "text": "Returns the actual identifier values of  $object .", 
            "title": "getIdentifiers(object $object): array"
        }, 
        {
            "location": "/ddd/identities/#getidentifierfieldnamesstring-class-array", 
            "text": "Returns the identifier field names for  $class . Any instance should have an identity composed of these field values.\nSee also  DomainIdentityMappingInterface::getIdentifierFieldNames() .", 
            "title": "getIdentifierFieldNames(string $class): array"
        }, 
        {
            "location": "/ddd/identities/#isidentitystring-class-value-bool", 
            "text": "Tells if  $value  is a valid identity for type  $class . An identity value is considered valid if an entity object uses\na single identifier value as identity and  $value  is a non empty identifier (see  isEmptyIdentifier() ).  In case of one or more identifier values, given in the form of an array, its keys must exactly match the available\nidentifier field names and its values must contain no empty identifiers.", 
            "title": "isIdentity(string $class, $value): bool"
        }, 
        {
            "location": "/ddd/identities/#toidentitystring-class-value-array", 
            "text": "Returns a composite identity value for  $class  from  $value .", 
            "title": "toIdentity(string $class, $value): array"
        }, 
        {
            "location": "/ddd/identities/#getidentityobject-object-array", 
            "text": "Returns the actual, non empty, identifier values of  $object . Each identifier value is keyed by its corresponding\nidentifier field name. See also  DomainIdentityMappingInterface::getIdentity() .", 
            "title": "getIdentity(object $object): array"
        }, 
        {
            "location": "/ddd/identities/#basic-example", 
            "text": "?php  use   MsgPhp\\Domain\\ { DomainId ,   DomainIdentityHelper };  use   MsgPhp\\Domain\\Infra\\InMemory\\DomainIdentityMapping ;  // --- SETUP ---  class   MyEntity  { \n     public   $id ;  }  class   MyCompositeEntity  { \n     public   $name ; \n     public   $year ;  }  $helper   =   new   DomainIdentityHelper ( new   DomainIdentityMapping ([ \n    MyEntity :: class   =   id , \n    MyCompositeEntity :: class   =   [ name ,   year ],  ]));  // --- USAGE ---  $entity   =   new   MyEntity ();  $entity - id   =   new   DomainId ( 1 );  $compositeEntity   =   new   MyCompositeEntity ();  $compositeEntity - name   =   ... ;  $compositeEntity - year   =   ... ;  $helper - isIdentity ( 1 );   // false  $helper - isIdentity ( new   DomainId ( 1 ));   // true  $helper - isIdentity ( $entity );   // true  $helper - normalizeIdentifier ( new   DomainId ());   // null  $helper - normalizeIdentifier ( new   DomainId ( 1 ));   //  1  $helper - normalizeIdentifier ( 1 );   //  1  $helper - normalizeIdentifier ( $entity );   //  1  $helper - normalizeIdentifier ( $compositeEntity );   // [ name  =  ...,  year  =  ....]  $helper - getIdentifiers ( $entity );   // [ id ]  $helper - getIdentifiers ( $compositeEntity );   // [ name ,  year ]  $helper - isIdentity ( MyEntity :: class ,   1 );   // true  $helper - isIdentity ( MyCompositeEntity :: class ,   1 );   // false  $helper - isIdentity ( MyCompositeEntity :: class ,   [ name   =   ... ]);   // false  $helper - isIdentity ( MyCompositeEntity :: class ,   [ name   =   ... ,   year   =   ... ]);   // true  $helper - toIdentity ( MyEntity :: class ,   1 );   // [ id  =  1]", 
            "title": "Basic Example"
        }, 
        {
            "location": "/ddd/identity-mapping/", 
            "text": "Identity Mapping\n\n\nAn identity mapping is a domain service and is bound to \nMsgPhp\\Domain\\DomainIdentityMappingInterface\n. It tells about\nthe identifier metadata for a known domain object.\n\n\nAPI\n\n\ngetIdentifierFieldNames(string $class): array\n\n\nReturns the identifier field names for \n$class\n. Any instance should have an identity composed of these field values.\n\n\n\n\ngetIdentity(object $object): array\n\n\nReturns the actual, non empty, identifier values of \n$object\n. Each identifier value is keyed by its corresponding\nidentifier field name.\n\n\nImplementations\n\n\nMsgPhp\\Domain\\Infra\\InMemory\\DomainIdentityMapping\n\n\nIdentity mapping based on a known in-memory mapping.\n\n\n\n\n__construct(array $mapping, ObjectFieldAccessor $accessor = null)\n\n\n$mapping\n: The identity mapping to use\n\n\n$accessor\n: Custom object field accessor. See also \nObjectFieldAccessor\n.\n\n\n\n\n\n\n\n\nBasic Example\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\Infra\\InMemory\\DomainIdentityMapping\n;\n\n\n\n// --- SETUP ---\n\n\n\nclass\n \nMyEntity\n\n\n{\n\n    \npublic\n \n$id\n;\n\n\n}\n\n\n\nclass\n \nMyCompositeEntity\n\n\n{\n\n    \npublic\n \n$name\n;\n\n    \npublic\n \n$year\n;\n\n\n}\n\n\n\n$mapping\n \n=\n \nnew\n \nDomainIdentityMapping\n([\n\n    \nMyEntity\n::\nclass\n \n=\n \nid\n,\n\n    \nMyCompositeEntity\n::\nclass\n \n=\n \n[\nname\n,\n \nyear\n],\n\n\n]);\n\n\n\n// --- USAGE ---\n\n\n\n$entity\n \n=\n \nnew\n \nMyEntity\n();\n\n\n$entity\n-\nid\n \n=\n \n...\n;\n\n\n\n$compositeEntity\n \n=\n \nnew\n \nMyCompositeEntity\n();\n\n\n$compositeEntity\n-\nname\n \n=\n \n...\n;\n\n\n$compositeEntity\n-\nyear\n \n=\n \n...\n;\n\n\n\n$mapping\n-\ngetIdentifierFieldNames\n(\nMyEntity\n::\nclass\n);\n \n// [\nid\n]\n\n\n$mapping\n-\ngetIdentifierFieldNames\n(\nMyCompositeEntity\n::\nclass\n);\n \n// [\nname\n, \nyear\n]\n\n\n\n$mapping\n-\ngetIdentity\n(\n$entity\n);\n \n// [\nid\n =\n ...]\n\n\n$mapping\n-\ngetIdentity\n(\n$compositeEntity\n);\n \n// [\nname\n =\n ..., \nyear\n =\n ...]\n\n\n\n\n\n\nMsgPhp\\Domain\\Infra\\Doctrine\\DomainIdentityMapping\n\n\nA Doctrine tailored identity mapping.\n\n\n\n\nRead more", 
            "title": "Identity Mapping"
        }, 
        {
            "location": "/ddd/identity-mapping/#identity-mapping", 
            "text": "An identity mapping is a domain service and is bound to  MsgPhp\\Domain\\DomainIdentityMappingInterface . It tells about\nthe identifier metadata for a known domain object.", 
            "title": "Identity Mapping"
        }, 
        {
            "location": "/ddd/identity-mapping/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/ddd/identity-mapping/#getidentifierfieldnamesstring-class-array", 
            "text": "Returns the identifier field names for  $class . Any instance should have an identity composed of these field values.", 
            "title": "getIdentifierFieldNames(string $class): array"
        }, 
        {
            "location": "/ddd/identity-mapping/#getidentityobject-object-array", 
            "text": "Returns the actual, non empty, identifier values of  $object . Each identifier value is keyed by its corresponding\nidentifier field name.", 
            "title": "getIdentity(object $object): array"
        }, 
        {
            "location": "/ddd/identity-mapping/#implementations", 
            "text": "", 
            "title": "Implementations"
        }, 
        {
            "location": "/ddd/identity-mapping/#msgphpdomaininfrainmemorydomainidentitymapping", 
            "text": "Identity mapping based on a known in-memory mapping.   __construct(array $mapping, ObjectFieldAccessor $accessor = null)  $mapping : The identity mapping to use  $accessor : Custom object field accessor. See also  ObjectFieldAccessor .", 
            "title": "MsgPhp\\Domain\\Infra\\InMemory\\DomainIdentityMapping"
        }, 
        {
            "location": "/ddd/identity-mapping/#basic-example", 
            "text": "?php  use   MsgPhp\\Domain\\Infra\\InMemory\\DomainIdentityMapping ;  // --- SETUP ---  class   MyEntity  { \n     public   $id ;  }  class   MyCompositeEntity  { \n     public   $name ; \n     public   $year ;  }  $mapping   =   new   DomainIdentityMapping ([ \n     MyEntity :: class   =   id , \n     MyCompositeEntity :: class   =   [ name ,   year ],  ]);  // --- USAGE ---  $entity   =   new   MyEntity ();  $entity - id   =   ... ;  $compositeEntity   =   new   MyCompositeEntity ();  $compositeEntity - name   =   ... ;  $compositeEntity - year   =   ... ;  $mapping - getIdentifierFieldNames ( MyEntity :: class );   // [ id ]  $mapping - getIdentifierFieldNames ( MyCompositeEntity :: class );   // [ name ,  year ]  $mapping - getIdentity ( $entity );   // [ id  =  ...]  $mapping - getIdentity ( $compositeEntity );   // [ name  =  ...,  year  =  ...]", 
            "title": "Basic Example"
        }, 
        {
            "location": "/ddd/identity-mapping/#msgphpdomaininfradoctrinedomainidentitymapping", 
            "text": "A Doctrine tailored identity mapping.   Read more", 
            "title": "MsgPhp\\Domain\\Infra\\Doctrine\\DomainIdentityMapping"
        }, 
        {
            "location": "/ddd/collections/", 
            "text": "Collections\n\n\nA domain collection is a \ntraversable\n and bound to \nMsgPhp\\Domain\\DomainCollectionInterface\n. Its purpose is to utilize\na primitive iterable value. It may hold any type of element values.\n\n\nAPI\n\n\nExtends\n\n\n\n\n\\Countable\n\n\n\\IteratorAggregate\n\n\n\n\n\n\nstatic fromValue(?iterable $value): DomainCollectionInterface\n\n\nReturns a factorized collection from any primitive iterable. Using \nnull\n implies an empty collection.\n\n\n\n\nisEmpty(): bool\n\n\nTells if a collection is considered empty, i.e. contains zero elements.\n\n\n\n\ncontains($element): bool\n\n\nTells if a collection contains the given element. Comparison is done strictly.\n\n\n\n\ncontainsKey($key): bool\n\n\nTells if a collection contains an element at the given key.\n\n\n\n\nfirst(): mixed\n\n\nReturns the first element from a collection.\n\n\n\n\nlast(): mixed\n\n\nReturns the last element from a collection.\n\n\n\n\nget($key): mixed\n\n\nReturns the element at the given key from a collection.\n\n\n\n\nfilter(callable $filter): DomainCollectionInterface\n\n\nReturns a \nnew\n collection containing only elements for which \n$filter\n returns \ntrue\n. Keys are preserved.\n\n\n\n\nslice(int $offset, int $limit = 0): DomainCollectionInterface\n\n\nReturns a \nnew\n collection containing a slice of elements. By default the slice has no limit, implied by integer \n0\n.\nKeys are preserved.\n\n\n\n\nmap(callable $mapper): DomainCollectionInterface\n\n\nReturns a \nnew\n collection containing each collection element as returned by \n$mapper\n. Keys are preserved.\n\n\nPagination API\n\n\nA collection that is part of a paginated result set is bound to \nMsgPhp\\Domain\\PaginatedDomainCollectionInterface\n. Its\npurpose is to expose the current pagination.\n\n\nExtends\n\n\n\n\nDomainCollectionInterface\n\n\n\n\n\n\ngetOffset(): float\n\n\nGet the current page offset.\n\n\n\n\ngetLimit(): float\n\n\nGet the current page limit (e.g. items per page).\n\n\n\n\ngetCurrentPage(): float\n\n\nGet the current page number.\n\n\n\n\ngetLastPage(): float\n\n\nGet the last page number.\n\n\n\n\ngetTotalCount(): float\n\n\nGet the total no. of items in the full result set.\n\n\n\n\nNote\n\n\ncount()\n should return the no. of items on the current page\n\n\n\n\nImplementations\n\n\nMsgPhp\\Domain\\DomainCollection\n\n\nA first class citizen domain collection. It leverages \niterable\n as underlying data type. Lazy support is built-in for\ntype \n\\Traversable\n. Meaning the minimal no. of elements are traversed, i.e. until the first element in case of\n\nisEmpty()\n. Note type \n\\Generator\n can only start traversing once.\n\n\n\n\n__construct(iterable $elements)\n\n\n$elements\n: The elements this collection contains\n\n\n\n\n\n\n\n\nBasic Example\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\DomainCollection\n;\n\n\n\n// --- SETUP ---\n\n\n\n$collection\n \n=\n \nnew\n \nDomainCollection\n([\na\n,\n \nb\n,\n \nc\n,\n \n1\n,\n \n2\n,\n \n3\n,\n \nkey\n \n=\n \nvalue\n]);\n\n\n\n// --- USAGE ---\n\n\n\n$collection\n-\nisEmpty\n();\n \n// false\n\n\ncount\n(\n$collection\n);\n \n// int(7)\n\n\n\n$collection\n-\ncontains\n(\n2\n);\n \n// true\n\n\n$collection\n-\ncontains\n(\n2\n);\n \n// false\n\n\n\n$collection\n-\ncontainsKey\n(\n0\n);\n \n// true\n\n\n$collection\n-\ncontainsKey\n(\n0\n);\n \n// true\n\n\n\n$collection\n-\nfirst\n();\n \n// \na\n\n\n$collection\n-\nlast\n();\n \n// int(3)\n\n\n\n$collection\n-\nget\n(\n0\n);\n \n// \na\n\n\n$collection\n-\nget\n(\n3\n);\n \n// int(1)\n\n\n$collection\n-\nget\n(\nkey\n);\n \n// \nvalue\n\n\n\n$onlyInts\n \n=\n \n$collection\n-\nfilter\n(\nfunction\n \n(\n$value\n)\n:\n \nbool\n \n{\n\n    \nreturn\n \nis_int\n(\n$value\n);\n\n\n});\n\n\n\n$firstTwoInts\n \n=\n \n$onlyInts\n-\nslice\n(\n0\n,\n \n2\n);\n\n\n\n$firstTwoIntsPlussed\n \n=\n \n$firstTwoInts\n-\nmap\n(\nfunction\n \n(\nint\n \n$value\n)\n:\n \nint\n \n{\n\n    \nreturn\n \n++\n$value\n;\n\n\n});\n\n\n\n\n\n\nMsgPhp\\Domain\\PaginatedDomainCollection\n\n\nA first class citizen paginated domain collection to transform any collection into a paginated collection.\n\n\n\n\n__construct(iterable $elements, float $offset = .0, float $limit = .0, float $count = null, float $totalCount = null)\n\n\n$elements\n: The elements this collection contains\n\n\n\n\n\n\n\n\nMsgPhp\\Domain\\Infra\\Doctrine\\DomainCollection\n\n\nA Doctrine tailored domain collection.\n\n\n\n\nRead more", 
            "title": "Collections"
        }, 
        {
            "location": "/ddd/collections/#collections", 
            "text": "A domain collection is a  traversable  and bound to  MsgPhp\\Domain\\DomainCollectionInterface . Its purpose is to utilize\na primitive iterable value. It may hold any type of element values.", 
            "title": "Collections"
        }, 
        {
            "location": "/ddd/collections/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/ddd/collections/#extends", 
            "text": "\\Countable  \\IteratorAggregate", 
            "title": "Extends"
        }, 
        {
            "location": "/ddd/collections/#static-fromvalueiterable-value-domaincollectioninterface", 
            "text": "Returns a factorized collection from any primitive iterable. Using  null  implies an empty collection.", 
            "title": "static fromValue(?iterable $value): DomainCollectionInterface"
        }, 
        {
            "location": "/ddd/collections/#isempty-bool", 
            "text": "Tells if a collection is considered empty, i.e. contains zero elements.", 
            "title": "isEmpty(): bool"
        }, 
        {
            "location": "/ddd/collections/#containselement-bool", 
            "text": "Tells if a collection contains the given element. Comparison is done strictly.", 
            "title": "contains($element): bool"
        }, 
        {
            "location": "/ddd/collections/#containskeykey-bool", 
            "text": "Tells if a collection contains an element at the given key.", 
            "title": "containsKey($key): bool"
        }, 
        {
            "location": "/ddd/collections/#first-mixed", 
            "text": "Returns the first element from a collection.", 
            "title": "first(): mixed"
        }, 
        {
            "location": "/ddd/collections/#last-mixed", 
            "text": "Returns the last element from a collection.", 
            "title": "last(): mixed"
        }, 
        {
            "location": "/ddd/collections/#getkey-mixed", 
            "text": "Returns the element at the given key from a collection.", 
            "title": "get($key): mixed"
        }, 
        {
            "location": "/ddd/collections/#filtercallable-filter-domaincollectioninterface", 
            "text": "Returns a  new  collection containing only elements for which  $filter  returns  true . Keys are preserved.", 
            "title": "filter(callable $filter): DomainCollectionInterface"
        }, 
        {
            "location": "/ddd/collections/#sliceint-offset-int-limit-0-domaincollectioninterface", 
            "text": "Returns a  new  collection containing a slice of elements. By default the slice has no limit, implied by integer  0 .\nKeys are preserved.", 
            "title": "slice(int $offset, int $limit = 0): DomainCollectionInterface"
        }, 
        {
            "location": "/ddd/collections/#mapcallable-mapper-domaincollectioninterface", 
            "text": "Returns a  new  collection containing each collection element as returned by  $mapper . Keys are preserved.", 
            "title": "map(callable $mapper): DomainCollectionInterface"
        }, 
        {
            "location": "/ddd/collections/#pagination-api", 
            "text": "A collection that is part of a paginated result set is bound to  MsgPhp\\Domain\\PaginatedDomainCollectionInterface . Its\npurpose is to expose the current pagination.", 
            "title": "Pagination API"
        }, 
        {
            "location": "/ddd/collections/#extends_1", 
            "text": "DomainCollectionInterface", 
            "title": "Extends"
        }, 
        {
            "location": "/ddd/collections/#getoffset-float", 
            "text": "Get the current page offset.", 
            "title": "getOffset(): float"
        }, 
        {
            "location": "/ddd/collections/#getlimit-float", 
            "text": "Get the current page limit (e.g. items per page).", 
            "title": "getLimit(): float"
        }, 
        {
            "location": "/ddd/collections/#getcurrentpage-float", 
            "text": "Get the current page number.", 
            "title": "getCurrentPage(): float"
        }, 
        {
            "location": "/ddd/collections/#getlastpage-float", 
            "text": "Get the last page number.", 
            "title": "getLastPage(): float"
        }, 
        {
            "location": "/ddd/collections/#gettotalcount-float", 
            "text": "Get the total no. of items in the full result set.   Note  count()  should return the no. of items on the current page", 
            "title": "getTotalCount(): float"
        }, 
        {
            "location": "/ddd/collections/#implementations", 
            "text": "", 
            "title": "Implementations"
        }, 
        {
            "location": "/ddd/collections/#msgphpdomaindomaincollection", 
            "text": "A first class citizen domain collection. It leverages  iterable  as underlying data type. Lazy support is built-in for\ntype  \\Traversable . Meaning the minimal no. of elements are traversed, i.e. until the first element in case of isEmpty() . Note type  \\Generator  can only start traversing once.   __construct(iterable $elements)  $elements : The elements this collection contains", 
            "title": "MsgPhp\\Domain\\DomainCollection"
        }, 
        {
            "location": "/ddd/collections/#basic-example", 
            "text": "?php  use   MsgPhp\\Domain\\DomainCollection ;  // --- SETUP ---  $collection   =   new   DomainCollection ([ a ,   b ,   c ,   1 ,   2 ,   3 ,   key   =   value ]);  // --- USAGE ---  $collection - isEmpty ();   // false  count ( $collection );   // int(7)  $collection - contains ( 2 );   // true  $collection - contains ( 2 );   // false  $collection - containsKey ( 0 );   // true  $collection - containsKey ( 0 );   // true  $collection - first ();   //  a  $collection - last ();   // int(3)  $collection - get ( 0 );   //  a  $collection - get ( 3 );   // int(1)  $collection - get ( key );   //  value  $onlyInts   =   $collection - filter ( function   ( $value ) :   bool   { \n     return   is_int ( $value );  });  $firstTwoInts   =   $onlyInts - slice ( 0 ,   2 );  $firstTwoIntsPlussed   =   $firstTwoInts - map ( function   ( int   $value ) :   int   { \n     return   ++ $value ;  });", 
            "title": "Basic Example"
        }, 
        {
            "location": "/ddd/collections/#msgphpdomainpaginateddomaincollection", 
            "text": "A first class citizen paginated domain collection to transform any collection into a paginated collection.   __construct(iterable $elements, float $offset = .0, float $limit = .0, float $count = null, float $totalCount = null)  $elements : The elements this collection contains", 
            "title": "MsgPhp\\Domain\\PaginatedDomainCollection"
        }, 
        {
            "location": "/ddd/collections/#msgphpdomaininfradoctrinedomaincollection", 
            "text": "A Doctrine tailored domain collection.   Read more", 
            "title": "MsgPhp\\Domain\\Infra\\Doctrine\\DomainCollection"
        }, 
        {
            "location": "/ddd/factory/object/", 
            "text": "Object Factory\n\n\nA domain object factory is bound to \nMsgPhp\\Domain\\Factory\\DomainObjectFactoryInterface\n. Its purpose is to initialize\nany domain object based on a given class name and context.\n\n\nAPI\n\n\ncreate(string $class, array $context = []): object\n\n\nReturns a factorized domain object by class name. Optionally a context can be provided for the factory to act upon.\n\n\ngetClass(string $class, array $context = []): string\n\n\nReturns the actual class name the factory will create and equalizes \nget_class($factory-\ncreate($class, $context))\n.\n\n\nImplementations\n\n\nMsgPhp\\Domain\\Factory\\DomainObjectFactory\n\n\nA generic object factory. It initializes the given class by reading its constructor arguments. Argument values are\nresolved from the provided context. By convention a camel cased argument name (e.g. \n$myArgument\n) matches a\ncorresponding underscored context key (i.e. \n'my_argument'\n), note however, an exact match (i.e. \n'myArgument'\n) has\nhigher precedence. In case the context key is numeric its value will be provided to a corresponding argument at index N.\n\n\nAny sub class of \nMsgPhp\\Domain\\DomainIdInterface\n or \nMsgPhp\\Domain\\DomainCollectionInterface\n will be initialized\nusing \n$class::fromValue()\n by default, otherwise initialization happens regularly (i.e. \nnew $class(...$arguments)\n).\n\n\nA class mapping can be provided and is usually used to map abstracts to concretes.\n\n\nNested objects (e.g. \nMyObject $myArgument\n) can be provided as nested context (thus nested array).\n\n\n\n\n__construct(array $classMapping = [])\n\n\n$classMapping\n: The class mapping (\n['SourceType' =\n 'TargetType']\n)`\n\n\n\n\n\n\nsetNestedFactory(?DomainObjectFactoryInterface $factory): void\n\n\n$factory\n: The factory for nested objects. If not set the current factory will be used instead.\n\n\n\n\n\n\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\Factory\\DomainObjectFactory\n;\n\n\n\n// --- SETUP ---\n\n\n\ninterface\n \nKnownInterface\n\n\n{\n\n\n}\n\n\n\nclass\n \nSome\n \nimplements\n \nKnownInterface\n\n\n{\n\n    \npublic\n \nfunction\n \n__construct\n(\nint\n \n$a\n,\n \n?\nint\n \n$b\n,\n \n?\nint\n \n$c\n)\n\n    \n{\n\n    \n}\n\n\n}\n\n\n\nclass\n \nSubject\n\n\n{\n\n    \npublic\n \nfunction\n \n__construct\n(\nstring\n \n$argument\n,\n \nKnownInterface\n \n$some\n,\n \nSubject\n \n$otherSubject\n \n=\n \nnull\n)\n\n    \n{\n\n    \n}\n\n\n}\n\n\n\n$factory\n \n=\n \nnew\n \nDomainObjectFactory\n([\n\n    \nKnownInterface\n::\nclass\n \n=\n \nSome\n::\nclass\n,\n\n\n]);\n\n\n\n// --- USAGE ---\n\n\n\n/** @var Some $object */\n\n\n$object\n \n=\n \n$factory\n-\ncreate\n(\nKnownInterface\n::\nclass\n,\n \n[\na\n \n=\n \n1\n]);\n\n\n$factory\n-\ngetClass\n(\nKnownInterface\n::\nclass\n);\n \n// \nSome\n\n\n\n/** @var Subject $object */\n\n\n$object\n \n=\n \n$factory\n-\ncreate\n(\nSubject\n::\nclass\n,\n \n[\n\n    \nargument\n \n=\n  \nvalue\n,\n\n    \nsome\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n],\n\n    \nother_subject\n \n=\n \n[\n\n        \nargument\n \n=\n \nother_value\n,\n\n        \nsome\n \n=\n \n[\na\n \n=\n \n1\n],\n\n    \n],\n\n\n]);", 
            "title": "Object Factory"
        }, 
        {
            "location": "/ddd/factory/object/#object-factory", 
            "text": "A domain object factory is bound to  MsgPhp\\Domain\\Factory\\DomainObjectFactoryInterface . Its purpose is to initialize\nany domain object based on a given class name and context.", 
            "title": "Object Factory"
        }, 
        {
            "location": "/ddd/factory/object/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/ddd/factory/object/#createstring-class-array-context-object", 
            "text": "Returns a factorized domain object by class name. Optionally a context can be provided for the factory to act upon.", 
            "title": "create(string $class, array $context = []): object"
        }, 
        {
            "location": "/ddd/factory/object/#getclassstring-class-array-context-string", 
            "text": "Returns the actual class name the factory will create and equalizes  get_class($factory- create($class, $context)) .", 
            "title": "getClass(string $class, array $context = []): string"
        }, 
        {
            "location": "/ddd/factory/object/#implementations", 
            "text": "", 
            "title": "Implementations"
        }, 
        {
            "location": "/ddd/factory/object/#msgphpdomainfactorydomainobjectfactory", 
            "text": "A generic object factory. It initializes the given class by reading its constructor arguments. Argument values are\nresolved from the provided context. By convention a camel cased argument name (e.g.  $myArgument ) matches a\ncorresponding underscored context key (i.e.  'my_argument' ), note however, an exact match (i.e.  'myArgument' ) has\nhigher precedence. In case the context key is numeric its value will be provided to a corresponding argument at index N.  Any sub class of  MsgPhp\\Domain\\DomainIdInterface  or  MsgPhp\\Domain\\DomainCollectionInterface  will be initialized\nusing  $class::fromValue()  by default, otherwise initialization happens regularly (i.e.  new $class(...$arguments) ).  A class mapping can be provided and is usually used to map abstracts to concretes.  Nested objects (e.g.  MyObject $myArgument ) can be provided as nested context (thus nested array).   __construct(array $classMapping = [])  $classMapping : The class mapping ( ['SourceType' =  'TargetType'] )`    setNestedFactory(?DomainObjectFactoryInterface $factory): void  $factory : The factory for nested objects. If not set the current factory will be used instead.", 
            "title": "MsgPhp\\Domain\\Factory\\DomainObjectFactory"
        }, 
        {
            "location": "/ddd/factory/object/#basic-example", 
            "text": "?php  use   MsgPhp\\Domain\\Factory\\DomainObjectFactory ;  // --- SETUP ---  interface   KnownInterface  {  }  class   Some   implements   KnownInterface  { \n     public   function   __construct ( int   $a ,   ? int   $b ,   ? int   $c ) \n     { \n     }  }  class   Subject  { \n     public   function   __construct ( string   $argument ,   KnownInterface   $some ,   Subject   $otherSubject   =   null ) \n     { \n     }  }  $factory   =   new   DomainObjectFactory ([ \n     KnownInterface :: class   =   Some :: class ,  ]);  // --- USAGE ---  /** @var Some $object */  $object   =   $factory - create ( KnownInterface :: class ,   [ a   =   1 ]);  $factory - getClass ( KnownInterface :: class );   //  Some  /** @var Subject $object */  $object   =   $factory - create ( Subject :: class ,   [ \n     argument   =    value , \n     some   =   [ 1 ,   2 ,   3 ], \n     other_subject   =   [ \n         argument   =   other_value , \n         some   =   [ a   =   1 ], \n     ],  ]);", 
            "title": "Basic example"
        }, 
        {
            "location": "/ddd/factory/entity-aware/", 
            "text": "Entity Aware Factory\n\n\nAn entity aware factory is an \nobject factory\n and additionally bound to\n\nMsgPhp\\Domain\\Factory\\EntityAwareFactoryInterface\n. Its purpose is to factorize entity related objects.\n\n\nAPI\n\n\nExtends\n\n\n\n\nDomainObjectFactoryInterface\n\n\n\n\n\n\nreference(string $class, $id): object\n\n\nReturns a factorized reference object for a known existing entity object. The object must be of type \n$class\n. Any type\nof \nidentity\n value can be passed as \n$id\n.\n\n\n\n\nidentify(string $class, $value): DomainIdInterface\n\n\nReturns a factorized \ndomain identifier\n for the given entity class from a known primitive value.\n\n\n\n\nnextIdentifier(string $class): DomainIdInterface\n\n\nReturns the next \ndomain identifier\n for the given entity class. Depending on the implementation its\nvalue might be considered empty if it's not capable to calculate one upfront.\n\n\nImplementations\n\n\nMsgPhp\\Domain\\Factory\\EntityAwareFactory\n\n\nA generic entity factory.\n\n\n\n\n__construct(DomainObjectFactoryInterface $factory, DomainIdentityHelper $identityHelper, array $identifierMapping = [])\n\n\n$factory\n: The decorated \nobject factory\n\n\n$identityHelper\n: The \nidentity helper\n\n\n$identifierMapping\n: The identifier class mapping (\n['EntityType' =\n 'IdType']\n)\n\n\n\n\n\n\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\\n{\nDomainId\n,\n \nDomainIdentityHelper\n};\n\n\nuse\n \nMsgPhp\\Domain\\Factory\\\n{\nDomainObjectFactory\n,\n \nEntityAwareFactory\n};\n\n\nuse\n \nMsgPhp\\Domain\\Infra\\InMemory\\DomainIdentityMapping\n;\n\n\n\n// --- SETUP ---\n\n\n\nclass\n \nMyEntity\n\n\n{\n\n    \npublic\n \n$id\n;\n\n\n    \npublic\n \nfunction\n \n__construct\n(\n$id\n)\n\n    \n{\n\n        \n$this\n-\nid\n \n=\n \n$id\n;\n\n    \n}\n\n\n}\n\n\n\n$factory\n \n=\n \nnew\n \nEntityAwareFactory\n(\n\n    \nnew\n \nDomainObjectFactory\n(),\n\n    \nnew\n \nDomainIdentityHelper\n(\nnew\n \nDomainIdentityMapping\n([\n\n        \nMyEntity\n::\nclass\n \n=\n \nid\n,\n\n    \n])),\n\n    \n[\n\n        \nMyEntity\n::\nclass\n \n=\n \nDomainId\n::\nclass\n,\n\n    \n]\n\n\n);\n\n\n\n// --- USAGE ---\n\n\n\n/** @var MyEntity $ref */\n\n\n$ref\n \n=\n \n$factory\n-\nreference\n(\nMyEntity\n::\nclass\n,\n \nnew\n \nDomainId\n(\n1\n));\n\n\n\n/** @var DomainId $id */\n\n\n$id\n \n=\n \n$factory\n-\nidentify\n(\nMyEntity\n::\nclass\n,\n \n1\n);\n\n\n\n/** @var DomainId $id */\n\n\n$id\n \n=\n \n$factory\n-\nnextIdentifier\n(\nMyEntity\n::\nclass\n);\n\n\n\n\n\n\n\n\nNote\n\n\nEntityAwareFactory::reference()\n requires \nsymfony/var-exporter\n\n\n\n\nMsgPhp\\Domain\\Infra\\Doctrine\\EntityAwareFactory\n\n\nA Doctrine tailored entity aware factory.\n\n\n\n\nRead more", 
            "title": "Entity Aware Factory"
        }, 
        {
            "location": "/ddd/factory/entity-aware/#entity-aware-factory", 
            "text": "An entity aware factory is an  object factory  and additionally bound to MsgPhp\\Domain\\Factory\\EntityAwareFactoryInterface . Its purpose is to factorize entity related objects.", 
            "title": "Entity Aware Factory"
        }, 
        {
            "location": "/ddd/factory/entity-aware/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/ddd/factory/entity-aware/#extends", 
            "text": "DomainObjectFactoryInterface", 
            "title": "Extends"
        }, 
        {
            "location": "/ddd/factory/entity-aware/#referencestring-class-id-object", 
            "text": "Returns a factorized reference object for a known existing entity object. The object must be of type  $class . Any type\nof  identity  value can be passed as  $id .", 
            "title": "reference(string $class, $id): object"
        }, 
        {
            "location": "/ddd/factory/entity-aware/#identifystring-class-value-domainidinterface", 
            "text": "Returns a factorized  domain identifier  for the given entity class from a known primitive value.", 
            "title": "identify(string $class, $value): DomainIdInterface"
        }, 
        {
            "location": "/ddd/factory/entity-aware/#nextidentifierstring-class-domainidinterface", 
            "text": "Returns the next  domain identifier  for the given entity class. Depending on the implementation its\nvalue might be considered empty if it's not capable to calculate one upfront.", 
            "title": "nextIdentifier(string $class): DomainIdInterface"
        }, 
        {
            "location": "/ddd/factory/entity-aware/#implementations", 
            "text": "", 
            "title": "Implementations"
        }, 
        {
            "location": "/ddd/factory/entity-aware/#msgphpdomainfactoryentityawarefactory", 
            "text": "A generic entity factory.   __construct(DomainObjectFactoryInterface $factory, DomainIdentityHelper $identityHelper, array $identifierMapping = [])  $factory : The decorated  object factory  $identityHelper : The  identity helper  $identifierMapping : The identifier class mapping ( ['EntityType' =  'IdType'] )", 
            "title": "MsgPhp\\Domain\\Factory\\EntityAwareFactory"
        }, 
        {
            "location": "/ddd/factory/entity-aware/#basic-example", 
            "text": "?php  use   MsgPhp\\Domain\\ { DomainId ,   DomainIdentityHelper };  use   MsgPhp\\Domain\\Factory\\ { DomainObjectFactory ,   EntityAwareFactory };  use   MsgPhp\\Domain\\Infra\\InMemory\\DomainIdentityMapping ;  // --- SETUP ---  class   MyEntity  { \n     public   $id ; \n\n     public   function   __construct ( $id ) \n     { \n         $this - id   =   $id ; \n     }  }  $factory   =   new   EntityAwareFactory ( \n     new   DomainObjectFactory (), \n     new   DomainIdentityHelper ( new   DomainIdentityMapping ([ \n         MyEntity :: class   =   id , \n     ])), \n     [ \n         MyEntity :: class   =   DomainId :: class , \n     ]  );  // --- USAGE ---  /** @var MyEntity $ref */  $ref   =   $factory - reference ( MyEntity :: class ,   new   DomainId ( 1 ));  /** @var DomainId $id */  $id   =   $factory - identify ( MyEntity :: class ,   1 );  /** @var DomainId $id */  $id   =   $factory - nextIdentifier ( MyEntity :: class );    Note  EntityAwareFactory::reference()  requires  symfony/var-exporter", 
            "title": "Basic example"
        }, 
        {
            "location": "/ddd/factory/entity-aware/#msgphpdomaininfradoctrineentityawarefactory", 
            "text": "A Doctrine tailored entity aware factory.   Read more", 
            "title": "MsgPhp\\Domain\\Infra\\Doctrine\\EntityAwareFactory"
        }, 
        {
            "location": "/ddd/factory/static/", 
            "text": "Static Factory\n\n\nA static factory is a utility class. Its purpose is to ease factorizing some known implementation in a static way.\n\n\nImplementations\n\n\nMsgPhp\\Domain\\Factory\\DomainIdFactory\n\n\nFactorizes an \ndomain identifier\n.\n\n\n\n\nstatic create($value): DomainIdInterface\n\n\n$value\n: Any (primitive) identifier value\n\n\n\n\n\n\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\DomainId\n;\n\n\nuse\n \nMsgPhp\\Domain\\Factory\\DomainIdFactory\n;\n\n\nuse\n \nMsgPhp\\Domain\\Infra\\Uuid\\DomainId\n \nas\n \nDomainUuid\n;\n\n\n\n// --- USAGE ---\n\n\n\n/** @var DomainId $id */\n\n\n$id\n \n=\n \nDomainIdFactory\n::\ncreate\n(\n1\n);\n\n\n\n/** @var DomainUuid $id */\n\n\n$id\n \n=\n \nDomainIdFactory\n::\ncreate\n(\ncf3d2f85-6c86-44d1-8634-af51c91a9a74\n);\n\n\n\n\n\n\nMsgPhp\\Domain\\Factory\\DomainCollectionFactory\n\n\nFactorizes a \ndomain collection\n.\n\n\n\n\nstatic create(?iterable $value): DomainCollectionInterface\n\n\n$value\n: Any iterable value or \nnull\n to imply an empty collection\n\n\n\n\n\n\nstatic createFromCallable(callable $value): DomainCollectionInterface\n\n\n$value\n: A callable returning any iterable value\n\n\n\n\n\n\n\n\nBasic Example\n\n\n?php\n\n\n\nuse\n \nDoctrine\\Common\\Collections\\ArrayCollection\n;\n\n\nuse\n \nMsgPhp\\Domain\\DomainCollection\n;\n\n\nuse\n \nMsgPhp\\Domain\\Factory\\DomainCollectionFactory\n;\n\n\nuse\n \nMsgPhp\\Domain\\Infra\\Doctrine\\DomainCollection\n \nas\n \nDoctrineDomainCollection\n;\n\n\n\n// --- USAGE ---\n\n\n\n/** @var DomainCollection $collection */\n\n\n$collection\n \n=\n \nDomainCollectionFactory\n::\ncreate\n([\n1\n,\n \n2\n,\n \n3\n]);\n\n\n\n/** @var DoctrineDomainCollection $collection */\n\n\n$collection\n \n=\n \nDomainCollectionFactory\n::\ncreate\n(\nnew\n \nArrayCollection\n([\n1\n,\n \n2\n,\n \n3\n]));\n\n\n\n\n\n\nRewindable Generator Example\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\DomainCollection\n;\n\n\nuse\n \nMsgPhp\\Domain\\Factory\\DomainCollectionFactory\n;\n\n\n\n// --- USAGE ---\n\n\n\n/** @var DomainCollection $collection */\n\n\n$collection\n \n=\n \nDomainCollectionFactory\n::\ncreateFromCallable\n(\nfunction\n \n()\n:\n \niterable\n \n{\n\n    \nyield\n \n1\n;\n\n    \nyield\n \n2\n;\n\n\n});\n\n\n\n$count\n \n=\n \ncount\n(\n$collection\n);\n \n// int(2)\n\n\n$array\n \n=\n \niterator_to_array\n(\n$collection\n);\n \n// [1, 2]", 
            "title": "Static Factory"
        }, 
        {
            "location": "/ddd/factory/static/#static-factory", 
            "text": "A static factory is a utility class. Its purpose is to ease factorizing some known implementation in a static way.", 
            "title": "Static Factory"
        }, 
        {
            "location": "/ddd/factory/static/#implementations", 
            "text": "", 
            "title": "Implementations"
        }, 
        {
            "location": "/ddd/factory/static/#msgphpdomainfactorydomainidfactory", 
            "text": "Factorizes an  domain identifier .   static create($value): DomainIdInterface  $value : Any (primitive) identifier value", 
            "title": "MsgPhp\\Domain\\Factory\\DomainIdFactory"
        }, 
        {
            "location": "/ddd/factory/static/#basic-example", 
            "text": "?php  use   MsgPhp\\Domain\\DomainId ;  use   MsgPhp\\Domain\\Factory\\DomainIdFactory ;  use   MsgPhp\\Domain\\Infra\\Uuid\\DomainId   as   DomainUuid ;  // --- USAGE ---  /** @var DomainId $id */  $id   =   DomainIdFactory :: create ( 1 );  /** @var DomainUuid $id */  $id   =   DomainIdFactory :: create ( cf3d2f85-6c86-44d1-8634-af51c91a9a74 );", 
            "title": "Basic example"
        }, 
        {
            "location": "/ddd/factory/static/#msgphpdomainfactorydomaincollectionfactory", 
            "text": "Factorizes a  domain collection .   static create(?iterable $value): DomainCollectionInterface  $value : Any iterable value or  null  to imply an empty collection    static createFromCallable(callable $value): DomainCollectionInterface  $value : A callable returning any iterable value", 
            "title": "MsgPhp\\Domain\\Factory\\DomainCollectionFactory"
        }, 
        {
            "location": "/ddd/factory/static/#basic-example_1", 
            "text": "?php  use   Doctrine\\Common\\Collections\\ArrayCollection ;  use   MsgPhp\\Domain\\DomainCollection ;  use   MsgPhp\\Domain\\Factory\\DomainCollectionFactory ;  use   MsgPhp\\Domain\\Infra\\Doctrine\\DomainCollection   as   DoctrineDomainCollection ;  // --- USAGE ---  /** @var DomainCollection $collection */  $collection   =   DomainCollectionFactory :: create ([ 1 ,   2 ,   3 ]);  /** @var DoctrineDomainCollection $collection */  $collection   =   DomainCollectionFactory :: create ( new   ArrayCollection ([ 1 ,   2 ,   3 ]));", 
            "title": "Basic Example"
        }, 
        {
            "location": "/ddd/factory/static/#rewindable-generator-example", 
            "text": "?php  use   MsgPhp\\Domain\\DomainCollection ;  use   MsgPhp\\Domain\\Factory\\DomainCollectionFactory ;  // --- USAGE ---  /** @var DomainCollection $collection */  $collection   =   DomainCollectionFactory :: createFromCallable ( function   () :   iterable   { \n     yield   1 ; \n     yield   2 ;  });  $count   =   count ( $collection );   // int(2)  $array   =   iterator_to_array ( $collection );   // [1, 2]", 
            "title": "Rewindable Generator Example"
        }, 
        {
            "location": "/ddd/entities/", 
            "text": "Entities\n\n\nEntity objects are provided per domain layer and usually follow a \nPOPO\n design. To simplify its definition common\nfields and features are provided in the form of PHP \ntraits\n. Fields can be compared to a read-operation, whereas\nfeatures represent a read/write-operation.\n\n\nThey are defined in a dedicated namespace for discovery, respectively \nMsgphp\\Domain\\Entity\\Fields\\\n and\n\nMsgPhp\\Domain\\Entity\\Features\\\n. Additionally more specific fields and features can be provided per domain layer.\n\n\n\n\nNote\n\n\nSee the \nreference\n page for all available entities provided per domain\n\n\n\n\nBasic Example\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\Entity\\Fields\\CreatedAtField\n;\n\n\nuse\n \nMsgPhp\\Domain\\Entity\\Features\\CanBeEnabled\n;\n\n\n\n// --- SETUP ---\n\n\n\nclass\n \nMyEntity\n\n\n{\n\n    \nuse\n \nCreatedAtField\n;\n\n    \nuse\n \nCanBeEnabled\n;\n\n\n    \npublic\n \nfunction\n \n__construct\n()\n\n    \n{\n\n        \n$this\n-\ncreatedAt\n \n=\n \nnew\n \n\\DateTimeImmutable\n();\n\n    \n}\n\n\n}\n\n\n\n// --- USAGE ---\n\n\n\n$entity\n \n=\n \nnew\n \nMyEntity\n();\n\n\n$createdAt\n \n=\n \n$entity\n-\ngetCreatedAt\n();\n\n\n\nif\n \n(\n!\n$entity\n-\nisEnabled\n())\n \n{\n\n    \n$entity\n-\nenable\n();\n\n\n}", 
            "title": "Entities"
        }, 
        {
            "location": "/ddd/entities/#entities", 
            "text": "Entity objects are provided per domain layer and usually follow a  POPO  design. To simplify its definition common\nfields and features are provided in the form of PHP  traits . Fields can be compared to a read-operation, whereas\nfeatures represent a read/write-operation.  They are defined in a dedicated namespace for discovery, respectively  Msgphp\\Domain\\Entity\\Fields\\  and MsgPhp\\Domain\\Entity\\Features\\ . Additionally more specific fields and features can be provided per domain layer.   Note  See the  reference  page for all available entities provided per domain", 
            "title": "Entities"
        }, 
        {
            "location": "/ddd/entities/#basic-example", 
            "text": "?php  use   MsgPhp\\Domain\\Entity\\Fields\\CreatedAtField ;  use   MsgPhp\\Domain\\Entity\\Features\\CanBeEnabled ;  // --- SETUP ---  class   MyEntity  { \n     use   CreatedAtField ; \n     use   CanBeEnabled ; \n\n     public   function   __construct () \n     { \n         $this - createdAt   =   new   \\DateTimeImmutable (); \n     }  }  // --- USAGE ---  $entity   =   new   MyEntity ();  $createdAt   =   $entity - getCreatedAt ();  if   ( ! $entity - isEnabled ())   { \n     $entity - enable ();  }", 
            "title": "Basic Example"
        }, 
        {
            "location": "/ddd/repositories/", 
            "text": "Repositories\n\n\nA domain repository is not interface bound by default. Instead you can leverage a utility trait, tied to specific\ninfrastructure (e.g. Doctrine), to rapidly create one. This page describes the API provided by default \nimplementations\n.\n\n\n\n\nNote\n\n\nSee the \nreference\n page for all available repositories provided per domain\n\n\n\n\nAPI\n\n\ndoFindAll(int $offset = 0, int $limit = 0): DomainCollectionInterface\n\n\nFinds all entities available. An unlimited collection is implied by \n$limit\n set to zero.\n\n\n\n\ndoFindAllByFields(array $fields, int $offset = 0, int $limit = 0): DomainCollectionInterface\n\n\nFinds all entities matching all specified fields. Supported field values should be \nnull\n, \nscalar\n, \narray\n (one of a\nknown literal list) and \nobject\n (foreign entity or an \nidentifier\n). An unlimited collection is implied\nby \n$limit\n set to zero.\n\n\n\n\ndoFind($id): object\n\n\nFinds a single entity by its identity. Supported identity values should be \nscalar\n, \narray\n (composite \nidentity\n)\nand \nobject\n (foreign entity or an \nidentifier\n).\n\n\n\n\ndoFindByFields(array $fields): object\n\n\nFinds the first entity matching all specified fields. See \ndoFindAllByFields()\n for supported field values.\n\n\n\n\ndoExists($id): bool\n\n\nVerifies if an entity exists by its identity. See \ndoFind()\n for supported identity values.\n\n\n\n\ndoExistsByFields(array $fields): bool\n\n\nVerifies if an entity matching all specified fields exists. See \ndoFindAllByFields()\n for supported field values.\n\n\n\n\ndoSave(object $entity): void\n\n\nPersists an entity into the identity map. The entity will be available on any subsequent query.\n\n\n\n\ndoDelete(object $entity): void\n\n\nRemoves an entity from the identity map. The entity will be unavailable on any subsequent query.\n\n\nImplementations\n\n\nMsgPhp\\Domain\\Infra\\InMemory\\DomainEntityRepositoryTrait\n\n\nRepository trait based on in-memory persistence.\n\n\n\n\n__construct(string $class, DomainIdentityHelper $identityHelper, GlobalObjectMemory $memory = null, ObjectFieldAccessor $accessor = null)\n\n\n$class\n: The entity class this repository is tied to\n\n\n$identityHelper\n: The domain identity helper. \nRead more\n.\n\n\n$memory\n: Custom memory layer. By default the same global pool is used. See also \nGlobalObjectMemory\n.\n\n\n$accessor\n: Custom object field accessor. See also \nObjectFieldAccessor\n.\n\n\n\n\n\n\n\n\nBasic Example\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\DomainIdentityHelper\n;\n\n\nuse\n \nMsgPhp\\Domain\\Infra\\InMemory\\\n{\nDomainIdentityMapping\n,\n \nDomainEntityRepositoryTrait\n};\n\n\n\n// --- SETUP ---\n\n\n\nclass\n \nMyEntity\n\n\n{\n\n    \npublic\n \n$id\n;\n\n\n}\n\n\n\nclass\n \nMyEntityRepository\n\n\n{\n\n    \nuse\n \nDomainEntityRepositoryTrait\n \n{\n\n        \ndoFind\n \nas\n \npublic\n \nfind\n;\n\n        \ndoExists\n \nas\n \npublic\n \nexists\n;\n\n        \ndoSave\n \nas\n \npublic\n \nsave\n;\n\n    \n}\n\n\n}\n\n\n\n$helper\n \n=\n \nnew\n \nDomainIdentityHelper\n(\nnew\n \nDomainIdentityMapping\n([\n\n   \nMyEntity\n::\nclass\n \n=\n \nid\n,\n\n\n]));\n\n\n\n$repository\n \n=\n \nnew\n \nMyEntityRepository\n(\nMyEntity\n::\nclass\n,\n \n$helper\n);\n\n\n\n// --- USAGE ---\n\n\n\nif\n \n(\n$repository\n-\nexists\n(\n1\n))\n \n{\n\n    \n$entity\n \n=\n \n$repository\n-\nfind\n(\n1\n);\n\n\n}\n \nelse\n \n{\n\n    \n$entity\n \n=\n \nnew\n \nMyEntity\n();\n\n    \n$entity\n-\nid\n \n=\n \n1\n;\n\n\n    \n$repository\n-\nsave\n(\n$entity\n);\n\n\n}\n\n\n\n\n\n\nMsgPhp\\Domain\\Infra\\Doctrine\\DomainEntityRepositoryTrait\n\n\nA Doctrine tailored repository trait.\n\n\n\n\nRead more", 
            "title": "Repositories"
        }, 
        {
            "location": "/ddd/repositories/#repositories", 
            "text": "A domain repository is not interface bound by default. Instead you can leverage a utility trait, tied to specific\ninfrastructure (e.g. Doctrine), to rapidly create one. This page describes the API provided by default  implementations .   Note  See the  reference  page for all available repositories provided per domain", 
            "title": "Repositories"
        }, 
        {
            "location": "/ddd/repositories/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/ddd/repositories/#dofindallint-offset-0-int-limit-0-domaincollectioninterface", 
            "text": "Finds all entities available. An unlimited collection is implied by  $limit  set to zero.", 
            "title": "doFindAll(int $offset = 0, int $limit = 0): DomainCollectionInterface"
        }, 
        {
            "location": "/ddd/repositories/#dofindallbyfieldsarray-fields-int-offset-0-int-limit-0-domaincollectioninterface", 
            "text": "Finds all entities matching all specified fields. Supported field values should be  null ,  scalar ,  array  (one of a\nknown literal list) and  object  (foreign entity or an  identifier ). An unlimited collection is implied\nby  $limit  set to zero.", 
            "title": "doFindAllByFields(array $fields, int $offset = 0, int $limit = 0): DomainCollectionInterface"
        }, 
        {
            "location": "/ddd/repositories/#dofindid-object", 
            "text": "Finds a single entity by its identity. Supported identity values should be  scalar ,  array  (composite  identity )\nand  object  (foreign entity or an  identifier ).", 
            "title": "doFind($id): object"
        }, 
        {
            "location": "/ddd/repositories/#dofindbyfieldsarray-fields-object", 
            "text": "Finds the first entity matching all specified fields. See  doFindAllByFields()  for supported field values.", 
            "title": "doFindByFields(array $fields): object"
        }, 
        {
            "location": "/ddd/repositories/#doexistsid-bool", 
            "text": "Verifies if an entity exists by its identity. See  doFind()  for supported identity values.", 
            "title": "doExists($id): bool"
        }, 
        {
            "location": "/ddd/repositories/#doexistsbyfieldsarray-fields-bool", 
            "text": "Verifies if an entity matching all specified fields exists. See  doFindAllByFields()  for supported field values.", 
            "title": "doExistsByFields(array $fields): bool"
        }, 
        {
            "location": "/ddd/repositories/#dosaveobject-entity-void", 
            "text": "Persists an entity into the identity map. The entity will be available on any subsequent query.", 
            "title": "doSave(object $entity): void"
        }, 
        {
            "location": "/ddd/repositories/#dodeleteobject-entity-void", 
            "text": "Removes an entity from the identity map. The entity will be unavailable on any subsequent query.", 
            "title": "doDelete(object $entity): void"
        }, 
        {
            "location": "/ddd/repositories/#implementations", 
            "text": "", 
            "title": "Implementations"
        }, 
        {
            "location": "/ddd/repositories/#msgphpdomaininfrainmemorydomainentityrepositorytrait", 
            "text": "Repository trait based on in-memory persistence.   __construct(string $class, DomainIdentityHelper $identityHelper, GlobalObjectMemory $memory = null, ObjectFieldAccessor $accessor = null)  $class : The entity class this repository is tied to  $identityHelper : The domain identity helper.  Read more .  $memory : Custom memory layer. By default the same global pool is used. See also  GlobalObjectMemory .  $accessor : Custom object field accessor. See also  ObjectFieldAccessor .", 
            "title": "MsgPhp\\Domain\\Infra\\InMemory\\DomainEntityRepositoryTrait"
        }, 
        {
            "location": "/ddd/repositories/#basic-example", 
            "text": "?php  use   MsgPhp\\Domain\\DomainIdentityHelper ;  use   MsgPhp\\Domain\\Infra\\InMemory\\ { DomainIdentityMapping ,   DomainEntityRepositoryTrait };  // --- SETUP ---  class   MyEntity  { \n     public   $id ;  }  class   MyEntityRepository  { \n     use   DomainEntityRepositoryTrait   { \n         doFind   as   public   find ; \n         doExists   as   public   exists ; \n         doSave   as   public   save ; \n     }  }  $helper   =   new   DomainIdentityHelper ( new   DomainIdentityMapping ([ \n    MyEntity :: class   =   id ,  ]));  $repository   =   new   MyEntityRepository ( MyEntity :: class ,   $helper );  // --- USAGE ---  if   ( $repository - exists ( 1 ))   { \n     $entity   =   $repository - find ( 1 );  }   else   { \n     $entity   =   new   MyEntity (); \n     $entity - id   =   1 ; \n\n     $repository - save ( $entity );  }", 
            "title": "Basic Example"
        }, 
        {
            "location": "/ddd/repositories/#msgphpdomaininfradoctrinedomainentityrepositorytrait", 
            "text": "A Doctrine tailored repository trait.   Read more", 
            "title": "MsgPhp\\Domain\\Infra\\Doctrine\\DomainEntityRepositoryTrait"
        }, 
        {
            "location": "/event-sourcing/events/", 
            "text": "Events\n\n\nA domain event is bound to \nMsgPhp\\Domain\\Event\\DomainEventInterface\n. Its purpose is to represent any action that can\n \nhappen\n regarding the domain. When handled it might lead to an application state change.\n\n\n\n\nNote\n\n\nSee the \nreference\n page for all available events provided per domain\n\n\n\n\nImplementations\n\n\nMsgPhp\\Domain\\Event\\ConfirmEvent\n\n\nTriggers a confirmation. Handled by default with \nMsgPhp\\Domain\\Entity\\Features\\CanBeConfirmed::handleConfirmEvent()\n.\n\n\nMsgPhp\\Domain\\Event\\DisableEvent\n\n\nTriggers disabling availability. Handled by default with \nMsgPhp\\Domain\\Entity\\Features\\CanBeEnabled::handleDisableEvent()\n.\n\n\nMsgPhp\\Domain\\Event\\EnableEvent\n\n\nTriggers enabling availability. Handled by default with \nMsgPhp\\Domain\\Entity\\Features\\CanBeEnabled::handleEnableEvent()\n.", 
            "title": "Events"
        }, 
        {
            "location": "/event-sourcing/events/#events", 
            "text": "A domain event is bound to  MsgPhp\\Domain\\Event\\DomainEventInterface . Its purpose is to represent any action that can\n  happen  regarding the domain. When handled it might lead to an application state change.   Note  See the  reference  page for all available events provided per domain", 
            "title": "Events"
        }, 
        {
            "location": "/event-sourcing/events/#implementations", 
            "text": "", 
            "title": "Implementations"
        }, 
        {
            "location": "/event-sourcing/events/#msgphpdomaineventconfirmevent", 
            "text": "Triggers a confirmation. Handled by default with  MsgPhp\\Domain\\Entity\\Features\\CanBeConfirmed::handleConfirmEvent() .", 
            "title": "MsgPhp\\Domain\\Event\\ConfirmEvent"
        }, 
        {
            "location": "/event-sourcing/events/#msgphpdomaineventdisableevent", 
            "text": "Triggers disabling availability. Handled by default with  MsgPhp\\Domain\\Entity\\Features\\CanBeEnabled::handleDisableEvent() .", 
            "title": "MsgPhp\\Domain\\Event\\DisableEvent"
        }, 
        {
            "location": "/event-sourcing/events/#msgphpdomaineventenableevent", 
            "text": "Triggers enabling availability. Handled by default with  MsgPhp\\Domain\\Entity\\Features\\CanBeEnabled::handleEnableEvent() .", 
            "title": "MsgPhp\\Domain\\Event\\EnableEvent"
        }, 
        {
            "location": "/event-sourcing/event-handlers/", 
            "text": "Event Handlers\n\n\nA domain event handler is bound to \nMsgPhp\\Domain\\Event\\DomainEventHandlerInterface\n. Its purpose is to implement the\nhandling of \ndomain events\n within a certain context.\n\n\nUsually an entity implements it in order to mutate its own state (i.e. self-handling). It enforces the entity state to\nbe valid by design as it encapsulates all write operations.\n\n\nIn practice domain events can be recorded on trigger, or privately within the implementation. It allows to re-play them\nat any point in time afterwards. Consider this a design choice to be made upfront, e.g. in case your entity design\nrequires its history to be accessible.\n\n\nAPI\n\n\nhandleEvent(DomainEventInterface $event): bool\n\n\nHandles the given domain event for a known subject. A boolean return value tells if the domain event is actually handled\nyes or no.\n\n\nImplementations\n\n\nMsgPhp\\Domain\\Event\\DomainEventHandlerTrait\n\n\nA utility trait implementing the event handler API. By convention it maps events to\n\nhandle\nEvent_Class_Name_Without_Event_Suffix\nEvent()\n methods.\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\Event\\\n{\nDomainEventHandlerInterface\n,\n \nDomainEventHandlerTrait\n,\n \nDomainEventInterface\n};\n\n\n\n// --- SETUP ---\n\n\n\nclass\n \nMyDomainEvent\n \nimplements\n \nDomainEventInterface\n\n\n{\n\n    \npublic\n \n$newValue\n;\n\n\n    \npublic\n \nfunction\n \n__construct\n(\n$value\n)\n\n    \n{\n\n        \n$this\n-\nnewValue\n \n=\n \n$value\n;\n\n    \n}\n\n\n}\n\n\n\nclass\n \nMyEntity\n \nimplements\n \nDomainEventHandlerInterface\n\n\n{\n\n    \nuse\n \nDomainEventHandlerTrait\n;\n\n\n    \npublic\n \n$value\n;\n\n\n    \nprivate\n \nfunction\n \nhandleMyDomainEvent\n(\nMyDomainEvent\n \n$event\n)\n:\n \nbool\n\n    \n{\n\n        \nif\n \n(\n$this\n-\nvalue\n \n===\n \n$event\n-\nnewValue\n)\n \n{\n\n            \nreturn\n \nfalse\n;\n\n        \n}\n\n\n        \n$this\n-\nvalue\n \n=\n \n$event\n-\nnewValue\n;\n\n\n        \nreturn\n \ntrue\n;\n\n    \n}\n\n\n\n}\n\n\n\n// --- USAGE ---\n\n\n\n$entity\n \n=\n \nnew\n \nMyEntity\n();\n\n\n\nif\n \n(\n$entity\n-\nhandleEvent\n(\nnew\n \nMyDomainEvent\n(\nnew value\n)))\n \n{\n\n    \n// do something\n\n\n}", 
            "title": "Event Handlers"
        }, 
        {
            "location": "/event-sourcing/event-handlers/#event-handlers", 
            "text": "A domain event handler is bound to  MsgPhp\\Domain\\Event\\DomainEventHandlerInterface . Its purpose is to implement the\nhandling of  domain events  within a certain context.  Usually an entity implements it in order to mutate its own state (i.e. self-handling). It enforces the entity state to\nbe valid by design as it encapsulates all write operations.  In practice domain events can be recorded on trigger, or privately within the implementation. It allows to re-play them\nat any point in time afterwards. Consider this a design choice to be made upfront, e.g. in case your entity design\nrequires its history to be accessible.", 
            "title": "Event Handlers"
        }, 
        {
            "location": "/event-sourcing/event-handlers/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/event-sourcing/event-handlers/#handleeventdomaineventinterface-event-bool", 
            "text": "Handles the given domain event for a known subject. A boolean return value tells if the domain event is actually handled\nyes or no.", 
            "title": "handleEvent(DomainEventInterface $event): bool"
        }, 
        {
            "location": "/event-sourcing/event-handlers/#implementations", 
            "text": "", 
            "title": "Implementations"
        }, 
        {
            "location": "/event-sourcing/event-handlers/#msgphpdomaineventdomaineventhandlertrait", 
            "text": "A utility trait implementing the event handler API. By convention it maps events to handle Event_Class_Name_Without_Event_Suffix Event()  methods.", 
            "title": "MsgPhp\\Domain\\Event\\DomainEventHandlerTrait"
        }, 
        {
            "location": "/event-sourcing/event-handlers/#basic-example", 
            "text": "?php  use   MsgPhp\\Domain\\Event\\ { DomainEventHandlerInterface ,   DomainEventHandlerTrait ,   DomainEventInterface };  // --- SETUP ---  class   MyDomainEvent   implements   DomainEventInterface  { \n     public   $newValue ; \n\n     public   function   __construct ( $value ) \n     { \n         $this - newValue   =   $value ; \n     }  }  class   MyEntity   implements   DomainEventHandlerInterface  { \n     use   DomainEventHandlerTrait ; \n\n     public   $value ; \n\n     private   function   handleMyDomainEvent ( MyDomainEvent   $event ) :   bool \n     { \n         if   ( $this - value   ===   $event - newValue )   { \n             return   false ; \n         } \n\n         $this - value   =   $event - newValue ; \n\n         return   true ; \n     }  }  // --- USAGE ---  $entity   =   new   MyEntity ();  if   ( $entity - handleEvent ( new   MyDomainEvent ( new value )))   { \n     // do something  }", 
            "title": "Basic example"
        }, 
        {
            "location": "/message-driven/message-bus/", 
            "text": "Message Bus\n\n\nA domain message bus is bound to \nMsgPhp\\Domain\\Message\\DomainMessageBusInterface\n. Its purpose is to dispatch any type\nof message object and helps you to use \nCQRS\n and \nevent sourcing\n.\n\n\n\n\nNote\n\n\nSee the \nreference\n page for all available messages provided per domain\n\n\n\n\nAPI\n\n\ndispatch(object $message): void\n\n\nDispatches the given message object.\n\n\nImplementations\n\n\nMsgPhp\\Domain\\Infra\\Messenger\\DomainMessageBus\n\n\nA Symfony Messenger tailored domain message bus.\n\n\n\n\nRead more\n\n\n\n\nMsgPhp\\Domain\\Infra\\SimpleBus\\DomainMessageBus\n\n\nA SimpleBus tailored domain message bus.\n\n\n\n\nRead more", 
            "title": "Message Bus"
        }, 
        {
            "location": "/message-driven/message-bus/#message-bus", 
            "text": "A domain message bus is bound to  MsgPhp\\Domain\\Message\\DomainMessageBusInterface . Its purpose is to dispatch any type\nof message object and helps you to use  CQRS  and  event sourcing .   Note  See the  reference  page for all available messages provided per domain", 
            "title": "Message Bus"
        }, 
        {
            "location": "/message-driven/message-bus/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/message-driven/message-bus/#dispatchobject-message-void", 
            "text": "Dispatches the given message object.", 
            "title": "dispatch(object $message): void"
        }, 
        {
            "location": "/message-driven/message-bus/#implementations", 
            "text": "", 
            "title": "Implementations"
        }, 
        {
            "location": "/message-driven/message-bus/#msgphpdomaininframessengerdomainmessagebus", 
            "text": "A Symfony Messenger tailored domain message bus.   Read more", 
            "title": "MsgPhp\\Domain\\Infra\\Messenger\\DomainMessageBus"
        }, 
        {
            "location": "/message-driven/message-bus/#msgphpdomaininfrasimplebusdomainmessagebus", 
            "text": "A SimpleBus tailored domain message bus.   Read more", 
            "title": "MsgPhp\\Domain\\Infra\\SimpleBus\\DomainMessageBus"
        }, 
        {
            "location": "/message-driven/message-dispatcher/", 
            "text": "Message Dispatcher\n\n\nThe domain message dispatcher is a utility trait. Its purpose is to dispatch a factorized message object using a\n\nobject factory\n and a \nmessage bus\n.\n\n\nAPI\n\n\ndispatch(string $class, array $context = []): void\n\n\nDispatches a message object factorized from \n$class\n and \n$context\n.\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\Message\\MessageDispatchingTrait\n;\n\n\n\nclass\n \nMyMessage\n\n\n{\n\n    \npublic\n \n$argument\n;\n\n\n    \npublic\n \nfunction\n \n__construct\n(\nstring\n \n$argument\n)\n\n    \n{\n\n        \n$this\n-\nargument\n \n=\n \n$argument\n;\n\n    \n}\n\n\n}\n\n\n\nclass\n \nMyClass\n\n\n{\n\n    \nuse\n \nMessageDispatchingTrait\n;\n\n\n    \npublic\n \nfunction\n \ndoSomething\n()\n:\n \nvoid\n\n    \n{\n\n        \n$this\n-\ndispatch\n(\nMyMessage\n::\nclass\n,\n \n[\nargument\n \n=\n \nvalue\n]);\n\n    \n}\n\n\n}", 
            "title": "Message Dispatcher"
        }, 
        {
            "location": "/message-driven/message-dispatcher/#message-dispatcher", 
            "text": "The domain message dispatcher is a utility trait. Its purpose is to dispatch a factorized message object using a object factory  and a  message bus .", 
            "title": "Message Dispatcher"
        }, 
        {
            "location": "/message-driven/message-dispatcher/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/message-driven/message-dispatcher/#dispatchstring-class-array-context-void", 
            "text": "Dispatches a message object factorized from  $class  and  $context .", 
            "title": "dispatch(string $class, array $context = []): void"
        }, 
        {
            "location": "/message-driven/message-dispatcher/#basic-example", 
            "text": "?php  use   MsgPhp\\Domain\\Message\\MessageDispatchingTrait ;  class   MyMessage  { \n     public   $argument ; \n\n     public   function   __construct ( string   $argument ) \n     { \n         $this - argument   =   $argument ; \n     }  }  class   MyClass  { \n     use   MessageDispatchingTrait ; \n\n     public   function   doSomething () :   void \n     { \n         $this - dispatch ( MyMessage :: class ,   [ argument   =   value ]); \n     }  }", 
            "title": "Basic example"
        }, 
        {
            "location": "/message-driven/cqrs/", 
            "text": "Command Query Responsibility Segregation\n\n\nCommands are domain objects and provided per domain layer. They usually follow a \nPOPO\n design. Its purpose is to\ndescribe an action to be taken. For commands being messages they can be dispatched using any \nmessage bus\n.\n\n\nEvent-Sourcing Command Handler\n\n\nAn event-sourcing command handler utility trait is provided by \nMsgPhp\\Domain\\Command\\EventSourcingCommandHandlerTrait\n.\nIts purpose is to ease the handling of command messages by sourcing a \ndomain event\n to its\n\nevent handler\n.\n\n\n\n\nhandle(object $command, callable $onHandled = null): void\n\n\n$command\n: The command message to be handled\n\n\n$onHandled\n: Callable to be invoked in case the triggered domain event is handled. It receives the event handler\n  as first argument.\n\n\n\n\n\n\nabstract getDomainEvent(object $command): DomainEventInterface\n\n\nabstract getDomainEventHandler(object $command): DomainEventHandlerInterface\n\n\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\Command\\EventSourcingCommandHandlerTrait\n;\n \n\nuse\n \nMsgPhp\\Domain\\Event\\\n{\nDomainEventHandlerInterface\n,\n \nDomainEventInterface\n};\n\n\nuse\n \nMsgPhp\\Domain\\Message\\DomainMessageBusInterface\n;\n\n\n\n// --- SETUP ---\n\n\n\nclass\n \nMyCommand\n\n\n{\n\n\n}\n\n\n\nclass\n \nMyDomainEvent\n \nimplements\n \nDomainEventInterface\n\n\n{\n\n\n}\n\n\n\nclass\n \nMyEntity\n \nimplements\n \nDomainEventHandlerInterface\n\n\n{\n\n    \npublic\n \nfunction\n \nhandleEvent\n(\nDomainEventInterface\n \n$event\n)\n:\n \nbool\n\n    \n{\n\n        \nif\n \n(\n$event\n \ninstanceof\n \nMyDomainEvent\n)\n \n{\n\n            \n// do something\n\n\n            \nreturn\n \ntrue\n;\n\n        \n}\n\n\n        \nreturn\n \nfalse\n;\n\n    \n}\n\n\n}\n\n\n\nclass\n \nMyCommandHandler\n\n\n{\n\n    \nuse\n \nEventSourcingCommandHandlerTrait\n;\n\n\n    \npublic\n \nfunction\n \n__invoke\n(\nMyCommand\n \n$command\n)\n:\n \nvoid\n\n    \n{\n\n        \n$this\n-\nhandle\n(\n$command\n,\n \nfunction\n \n(\nMyEntity\n \n$entity\n)\n:\n \nvoid\n \n{\n\n            \n// do something when $command is handled\n\n        \n});\n\n    \n}\n\n\n    \nprotected\n \nfunction\n \ngetDomainEvent\n(\nMyCommand\n \n$command\n)\n:\n \nDomainEventInterface\n\n    \n{\n\n        \nreturn\n \nnew\n \nMyDomainEvent\n();\n\n    \n}\n\n\n    \nprotected\n \nfunction\n \ngetDomainEventHandler\n(\nMyCommand\n \n$command\n)\n:\n \nDomainEventHandlerInterface\n\n    \n{\n\n        \nreturn\n \nnew\n \nMyEntity\n();\n\n    \n}\n\n\n}\n\n\n\n// --- USAGE ---\n\n\n\n/** @var DomainMessageBusInterface $bus */\n\n\n$bus\n \n=\n \n...\n;\n\n\n\n$bus\n-\ndispatch\n(\nnew\n \nMyCommand\n());", 
            "title": "CQRS"
        }, 
        {
            "location": "/message-driven/cqrs/#command-query-responsibility-segregation", 
            "text": "Commands are domain objects and provided per domain layer. They usually follow a  POPO  design. Its purpose is to\ndescribe an action to be taken. For commands being messages they can be dispatched using any  message bus .", 
            "title": "Command Query Responsibility Segregation"
        }, 
        {
            "location": "/message-driven/cqrs/#event-sourcing-command-handler", 
            "text": "An event-sourcing command handler utility trait is provided by  MsgPhp\\Domain\\Command\\EventSourcingCommandHandlerTrait .\nIts purpose is to ease the handling of command messages by sourcing a  domain event  to its event handler .   handle(object $command, callable $onHandled = null): void  $command : The command message to be handled  $onHandled : Callable to be invoked in case the triggered domain event is handled. It receives the event handler\n  as first argument.    abstract getDomainEvent(object $command): DomainEventInterface  abstract getDomainEventHandler(object $command): DomainEventHandlerInterface", 
            "title": "Event-Sourcing Command Handler"
        }, 
        {
            "location": "/message-driven/cqrs/#basic-example", 
            "text": "?php  use   MsgPhp\\Domain\\Command\\EventSourcingCommandHandlerTrait ;   use   MsgPhp\\Domain\\Event\\ { DomainEventHandlerInterface ,   DomainEventInterface };  use   MsgPhp\\Domain\\Message\\DomainMessageBusInterface ;  // --- SETUP ---  class   MyCommand  {  }  class   MyDomainEvent   implements   DomainEventInterface  {  }  class   MyEntity   implements   DomainEventHandlerInterface  { \n     public   function   handleEvent ( DomainEventInterface   $event ) :   bool \n     { \n         if   ( $event   instanceof   MyDomainEvent )   { \n             // do something \n\n             return   true ; \n         } \n\n         return   false ; \n     }  }  class   MyCommandHandler  { \n     use   EventSourcingCommandHandlerTrait ; \n\n     public   function   __invoke ( MyCommand   $command ) :   void \n     { \n         $this - handle ( $command ,   function   ( MyEntity   $entity ) :   void   { \n             // do something when $command is handled \n         }); \n     } \n\n     protected   function   getDomainEvent ( MyCommand   $command ) :   DomainEventInterface \n     { \n         return   new   MyDomainEvent (); \n     } \n\n     protected   function   getDomainEventHandler ( MyCommand   $command ) :   DomainEventHandlerInterface \n     { \n         return   new   MyEntity (); \n     }  }  // --- USAGE ---  /** @var DomainMessageBusInterface $bus */  $bus   =   ... ;  $bus - dispatch ( new   MyCommand ());", 
            "title": "Basic example"
        }, 
        {
            "location": "/projection/models/", 
            "text": "Projections\n\n\nA projection is a model object and bound to \nMsgPhp\\Domain\\Projection\\ProjectionInterface\n. Its purpose is to\nconvert raw model data (a document) into a projection.\n\n\nThe document is usually a transformation from a domain object (e.g. an entity) and therefor projections should be\nconsidered read-only and disposable, as they can be re-created / synchronized at any time from a source of truth.\n\n\nA practical use case for projections are APIs, where each API resource is a so called projection from a corresponding\nentity. It enables decoupling and thus optimized API responses.\n\n\n\n\nInfo\n\n\nFor integration with \nAPI Platform\n see the \nprojection data provider\n\n\n\n\nAPI\n\n\nstatic fromDocument(array $document): ProjectionInterface\n\n\nCreates a projection from raw document data.\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\Projection\\ProjectionInterface\n;\n\n\n\n// --- SETUP ---\n\n\n\nclass\n \nMyProjection\n \nimplements\n \nProjectionInterface\n\n\n{\n\n    \npublic\n \n$someField\n;\n\n\n    \npublic\n \nstatic\n \nfunction\n \nfromDocument\n(\narray\n \n$document\n)\n:\n \nProjectionInterface\n\n    \n{\n\n        \n$projection\n \n=\n \nnew\n \nstatic\n();\n\n        \n$projection\n-\nsomeField\n \n=\n \n$document\n[\nsome_field\n]\n \n??\n \nnull\n;\n\n\n        \nreturn\n \n$projection\n;\n\n    \n}\n\n\n}\n\n\n\n// --- USAGE ---\n\n\n\n$projection\n \n=\n \nMyProjection\n::\nfromDocument\n([\n\n    \nsome_field\n \n=\n \nvalue\n,\n\n\n]);", 
            "title": "Models"
        }, 
        {
            "location": "/projection/models/#projections", 
            "text": "A projection is a model object and bound to  MsgPhp\\Domain\\Projection\\ProjectionInterface . Its purpose is to\nconvert raw model data (a document) into a projection.  The document is usually a transformation from a domain object (e.g. an entity) and therefor projections should be\nconsidered read-only and disposable, as they can be re-created / synchronized at any time from a source of truth.  A practical use case for projections are APIs, where each API resource is a so called projection from a corresponding\nentity. It enables decoupling and thus optimized API responses.   Info  For integration with  API Platform  see the  projection data provider", 
            "title": "Projections"
        }, 
        {
            "location": "/projection/models/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/projection/models/#static-fromdocumentarray-document-projectioninterface", 
            "text": "Creates a projection from raw document data.", 
            "title": "static fromDocument(array $document): ProjectionInterface"
        }, 
        {
            "location": "/projection/models/#basic-example", 
            "text": "?php  use   MsgPhp\\Domain\\Projection\\ProjectionInterface ;  // --- SETUP ---  class   MyProjection   implements   ProjectionInterface  { \n     public   $someField ; \n\n     public   static   function   fromDocument ( array   $document ) :   ProjectionInterface \n     { \n         $projection   =   new   static (); \n         $projection - someField   =   $document [ some_field ]   ??   null ; \n\n         return   $projection ; \n     }  }  // --- USAGE ---  $projection   =   MyProjection :: fromDocument ([ \n     some_field   =   value ,  ]);", 
            "title": "Basic example"
        }, 
        {
            "location": "/projection/documents/", 
            "text": "Projection Documents\n\n\nA projection document is a value object of type \nMsgPhp\\Domain\\Projection\\ProjectionDocument\n. Its purpose is to hold a\nprojection document its data and current state.\n\n\nAPI\n\n\nProperties\n\n\n\n\nint $status\n: The current document status. See also \ndefault statuses\n.\n\n\n?\\Throwable $error\n: An occurred error, if any\n\n\n?object $source\n: The source object, if any\n\n\n\n\n\n\ngetType(): string\n\n\nGets the projection type and refers to a \nprojection\n class name.\n\n\n\n\ngetId(): ?string\n\n\nGets the document ID, if any. Otherwise an auto-generated value is implied.\n\n\n\n\ngetBody(): array\n\n\nGets the document data.\n\n\n\n\ntoProjection(): ProjectionInterface\n\n\nTransforms the document into its projection model.\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\Projection\\\n{\nProjectionDocument\n,\n \nProjectionInterface\n};\n\n\n\n// --- SETUP ---\n\n\n\nclass\n \nMyProjection\n \nimplements\n \nProjectionInterface\n\n\n{\n\n    \npublic\n \nstatic\n \nfunction\n \nfromDocument\n(\narray\n \n$document\n)\n:\n \nProjectionInterface\n\n    \n{\n\n        \n// ...\n\n    \n}\n\n\n}\n\n\n\n$document\n \n=\n \nnew\n \nProjectionDocument\n(\nMyProjection\n::\nclass\n,\n \nnull\n,\n \n[\n\n    \nsome_field\n \n=\n \nvalue\n,\n\n\n]);\n\n\n\n/** @var MyProjection $projection */\n\n\n$projection\n \n=\n \n$document\n-\ntoProjection\n();", 
            "title": "Documents"
        }, 
        {
            "location": "/projection/documents/#projection-documents", 
            "text": "A projection document is a value object of type  MsgPhp\\Domain\\Projection\\ProjectionDocument . Its purpose is to hold a\nprojection document its data and current state.", 
            "title": "Projection Documents"
        }, 
        {
            "location": "/projection/documents/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/projection/documents/#properties", 
            "text": "int $status : The current document status. See also  default statuses .  ?\\Throwable $error : An occurred error, if any  ?object $source : The source object, if any", 
            "title": "Properties"
        }, 
        {
            "location": "/projection/documents/#gettype-string", 
            "text": "Gets the projection type and refers to a  projection  class name.", 
            "title": "getType(): string"
        }, 
        {
            "location": "/projection/documents/#getid-string", 
            "text": "Gets the document ID, if any. Otherwise an auto-generated value is implied.", 
            "title": "getId(): ?string"
        }, 
        {
            "location": "/projection/documents/#getbody-array", 
            "text": "Gets the document data.", 
            "title": "getBody(): array"
        }, 
        {
            "location": "/projection/documents/#toprojection-projectioninterface", 
            "text": "Transforms the document into its projection model.", 
            "title": "toProjection(): ProjectionInterface"
        }, 
        {
            "location": "/projection/documents/#basic-example", 
            "text": "?php  use   MsgPhp\\Domain\\Projection\\ { ProjectionDocument ,   ProjectionInterface };  // --- SETUP ---  class   MyProjection   implements   ProjectionInterface  { \n     public   static   function   fromDocument ( array   $document ) :   ProjectionInterface \n     { \n         // ... \n     }  }  $document   =   new   ProjectionDocument ( MyProjection :: class ,   null ,   [ \n     some_field   =   value ,  ]);  /** @var MyProjection $projection */  $projection   =   $document - toProjection ();", 
            "title": "Basic example"
        }, 
        {
            "location": "/projection/document-transformers/", 
            "text": "Projection Document Transformers\n\n\nA projection document transformer is bound to \nMsgPhp\\Domain\\Projection\\ProjectionDocumentTransformerInterface\n. Its\npurpose is to transform arbitrary objects into \nprojection documents\n.\n\n\nAPI\n\n\ntransform(object $object): ProjectionDocument\n\n\nTransforms the domain object into a projection document.\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\Projection\\\n{\nProjectionDocument\n,\n \nProjectionDocumentTransformerInterface\n,\n \nProjectionInterface\n};\n\n\n\n// --- SETUP ---\n\n\n\nclass\n \nMyEntity\n\n\n{\n\n    \npublic\n \n$id\n;\n\n    \npublic\n \n$someField\n;\n\n\n    \npublic\n \nfunction\n \n__construct\n(\n$id\n)\n\n    \n{\n\n        \n$this\n-\nid\n \n=\n \n$id\n;\n\n    \n}\n\n\n}\n\n\n\nclass\n \nMyProjection\n \nimplements\n \nProjectionInterface\n\n\n{\n\n    \npublic\n \n$id\n;\n\n    \npublic\n \n$someField\n;\n\n\n    \npublic\n \nstatic\n \nfunction\n \nfromDocument\n(\narray\n \n$document\n)\n:\n \nProjectionInterface\n\n    \n{\n\n        \n$projection\n \n=\n \nnew\n \nstatic\n();\n\n        \n$projection\n-\nid\n \n=\n \n$document\n[\nid\n]\n \n??\n \nnull\n;\n\n        \n$projection\n-\nsomeField\n \n=\n \n$document\n[\nsome_field\n]\n \n??\n \nnull\n;\n\n\n        \nreturn\n \n$projection\n;\n\n    \n}\n\n\n}\n\n\n\nclass\n \nMyTransformer\n \nimplements\n \nProjectionDocumentTransformerInterface\n\n\n{\n\n    \npublic\n \nfunction\n \ntransform\n(\n$object\n)\n:\n \nProjectionDocument\n\n    \n{\n\n        \nif\n \n(\n$object\n \ninstanceof\n \nMyEntity\n)\n \n{\n\n            \nreturn\n \nnew\n \nProjectionDocument\n(\nMyProjection\n::\nclass\n,\n \n$object\n-\nid\n,\n \n[\n\n                \nid\n \n=\n \n$object\n-\nid\n,\n\n                \nsome_field\n \n=\n \n$object\n-\nsomeField\n,\n\n            \n]);\n\n        \n}\n\n\n        \nthrow\n \nnew\n \n\\LogicException\n();\n\n    \n}\n\n\n}\n\n\n\n$transformer\n \n=\n \nnew\n \nMyTransformer\n();\n\n\n\n// --- USAGE ---\n\n\n\n$entity\n \n=\n \nnew\n \nMyEntity\n(\n1\n);\n\n\n$document\n \n=\n \n$transformer\n-\ntransform\n(\n$entity\n);\n\n\n$projection\n \n=\n \n$document\n-\ntoProjection\n();", 
            "title": "Document Transformers"
        }, 
        {
            "location": "/projection/document-transformers/#projection-document-transformers", 
            "text": "A projection document transformer is bound to  MsgPhp\\Domain\\Projection\\ProjectionDocumentTransformerInterface . Its\npurpose is to transform arbitrary objects into  projection documents .", 
            "title": "Projection Document Transformers"
        }, 
        {
            "location": "/projection/document-transformers/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/projection/document-transformers/#transformobject-object-projectiondocument", 
            "text": "Transforms the domain object into a projection document.", 
            "title": "transform(object $object): ProjectionDocument"
        }, 
        {
            "location": "/projection/document-transformers/#basic-example", 
            "text": "?php  use   MsgPhp\\Domain\\Projection\\ { ProjectionDocument ,   ProjectionDocumentTransformerInterface ,   ProjectionInterface };  // --- SETUP ---  class   MyEntity  { \n     public   $id ; \n     public   $someField ; \n\n     public   function   __construct ( $id ) \n     { \n         $this - id   =   $id ; \n     }  }  class   MyProjection   implements   ProjectionInterface  { \n     public   $id ; \n     public   $someField ; \n\n     public   static   function   fromDocument ( array   $document ) :   ProjectionInterface \n     { \n         $projection   =   new   static (); \n         $projection - id   =   $document [ id ]   ??   null ; \n         $projection - someField   =   $document [ some_field ]   ??   null ; \n\n         return   $projection ; \n     }  }  class   MyTransformer   implements   ProjectionDocumentTransformerInterface  { \n     public   function   transform ( $object ) :   ProjectionDocument \n     { \n         if   ( $object   instanceof   MyEntity )   { \n             return   new   ProjectionDocument ( MyProjection :: class ,   $object - id ,   [ \n                 id   =   $object - id , \n                 some_field   =   $object - someField , \n             ]); \n         } \n\n         throw   new   \\LogicException (); \n     }  }  $transformer   =   new   MyTransformer ();  // --- USAGE ---  $entity   =   new   MyEntity ( 1 );  $document   =   $transformer - transform ( $entity );  $projection   =   $document - toProjection ();", 
            "title": "Basic example"
        }, 
        {
            "location": "/projection/type-registry/", 
            "text": "Projection Type Registry\n\n\nA projection type registry is bound to \nMsgPhp\\Domain\\Projection\\ProjectionTypeRegistryInterface\n. Its purpose is to\nmanage all available \nprojection\n type information.\n\n\nAPI\n\n\nall(): string[]\n\n\nReturns all available projection types for this registry.\n\n\n\n\ninitialize(): void\n\n\nInitializes the type registry. Usually needs to be called only once per environment, or after any type information has\nchanged.\n\n\n\n\ndestroy(): void\n\n\nDestroys the type registry and thus requires to be re-initialized after.\n\n\nImplementations\n\n\nMsgPhp\\Domain\\Infra\\Elasticsearch\\ProjectionTypeRegistry\n\n\nAn Elasticsearch tailored projection type registry.\n\n\n\n\nRead more\n\n\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\Projection\\ProjectionTypeRegistryInterface\n;\n\n\n\n// --- SETUP ---\n\n\n\n/** @var ProjectionTypeRegistryInterface $typeRegistry */\n\n\n$typeRegistry\n \n=\n \n...\n;\n\n\n\n// --- USAGE ---\n\n\n\n$typeRegistry\n-\ndestroy\n();\n\n\n$typeRegistry\n-\ninitialize\n();\n\n\n\necho\n \nInitialized types: \n.\nimplode\n(\n, \n,\n \n$typeRegistry\n-\nall\n());\n\n\n\n\n\n\nCommand Line Interface\n\n\nThe type registry can be initialized using the CLI when working with Symfony Console.\n\n\n\n\nRead more", 
            "title": "Type Registry"
        }, 
        {
            "location": "/projection/type-registry/#projection-type-registry", 
            "text": "A projection type registry is bound to  MsgPhp\\Domain\\Projection\\ProjectionTypeRegistryInterface . Its purpose is to\nmanage all available  projection  type information.", 
            "title": "Projection Type Registry"
        }, 
        {
            "location": "/projection/type-registry/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/projection/type-registry/#all-string", 
            "text": "Returns all available projection types for this registry.", 
            "title": "all(): string[]"
        }, 
        {
            "location": "/projection/type-registry/#initialize-void", 
            "text": "Initializes the type registry. Usually needs to be called only once per environment, or after any type information has\nchanged.", 
            "title": "initialize(): void"
        }, 
        {
            "location": "/projection/type-registry/#destroy-void", 
            "text": "Destroys the type registry and thus requires to be re-initialized after.", 
            "title": "destroy(): void"
        }, 
        {
            "location": "/projection/type-registry/#implementations", 
            "text": "", 
            "title": "Implementations"
        }, 
        {
            "location": "/projection/type-registry/#msgphpdomaininfraelasticsearchprojectiontyperegistry", 
            "text": "An Elasticsearch tailored projection type registry.   Read more", 
            "title": "MsgPhp\\Domain\\Infra\\Elasticsearch\\ProjectionTypeRegistry"
        }, 
        {
            "location": "/projection/type-registry/#basic-example", 
            "text": "?php  use   MsgPhp\\Domain\\Projection\\ProjectionTypeRegistryInterface ;  // --- SETUP ---  /** @var ProjectionTypeRegistryInterface $typeRegistry */  $typeRegistry   =   ... ;  // --- USAGE ---  $typeRegistry - destroy ();  $typeRegistry - initialize ();  echo   Initialized types:  . implode ( ,  ,   $typeRegistry - all ());", 
            "title": "Basic example"
        }, 
        {
            "location": "/projection/type-registry/#command-line-interface", 
            "text": "The type registry can be initialized using the CLI when working with Symfony Console.   Read more", 
            "title": "Command Line Interface"
        }, 
        {
            "location": "/projection/repositories/", 
            "text": "Projection Repositories\n\n\nA projection repository is bound to \nMsgPhp\\Domain\\Projection\\ProjectionRepositoryInterface\n. Its purpose is to store\nand query \nprojection documents\n.\n\n\nAPI\n\n\nfindAll(string $type, int $offset = 0, int $limit = 0): ProjectionDocument[]\n\n\nFinds all projection documents by type.\n\n\n\n\nfind(string $type, string $id): ?ProjectionDocument\n\n\nFinds a single projection document by type and ID. In case its document cannot be found \nnull\n should be returned.\n\n\n\n\nclear(string $type): void\n\n\nDeletes all projection documents by type.\n\n\n\n\nsave(ProjectionDocument $document): void\n\n\nSaves a projection document. The document will be available on any subsequent query.\n\n\n\n\ndelete(string $type, string $id): void\n\n\nDeletes a projection document by type and ID. The document will be unavailable on any subsequent query.\n\n\nImplementations\n\n\nMsgPhp\\Domain\\Infra\\Elasticsearch\\ProjectionRepository\n\n\nAn Elasticsearch tailored projection repository.\n\n\n\n\nRead more\n\n\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\Projection\\\n{\nProjectionDocument\n,\n \nProjectionInterface\n,\n \nProjectionRepositoryInterface\n};\n\n\n\n// --- SETUP ---\n\n\n\nclass\n \nMyProjection\n \nimplements\n \nProjectionInterface\n\n\n{\n\n    \npublic\n \nstatic\n \nfunction\n \nfromDocument\n(\narray\n \n$document\n)\n:\n \nProjectionInterface\n\n    \n{\n\n        \n// ...\n\n    \n}\n\n\n}\n\n\n\n/** @var ProjectionRepositoryInterface $repository */\n\n\n$repository\n \n=\n \n...\n;\n\n\n\n// --- USAGE ---\n\n\n\n$id\n \n=\n \n...\n;\n\n\n$document\n \n=\n \n$repository\n-\nfind\n(\nMyProjection\n::\nclass\n,\n \n$id\n);\n\n\n\nif\n \n(\nnull\n \n===\n \n$projection\n)\n \n{\n\n    \n$document\n \n=\n \nProjectionDocument\n::\ncreate\n(\nMyProjection\n::\nclass\n,\n \n$id\n,\n \n[\n\n        \nsome_field\n \n=\n \nvalue\n,\n\n    \n]);\n\n    \n$repository\n-\nsave\n(\n$document\n);\n\n\n}", 
            "title": "Repositories"
        }, 
        {
            "location": "/projection/repositories/#projection-repositories", 
            "text": "A projection repository is bound to  MsgPhp\\Domain\\Projection\\ProjectionRepositoryInterface . Its purpose is to store\nand query  projection documents .", 
            "title": "Projection Repositories"
        }, 
        {
            "location": "/projection/repositories/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/projection/repositories/#findallstring-type-int-offset-0-int-limit-0-projectiondocument", 
            "text": "Finds all projection documents by type.", 
            "title": "findAll(string $type, int $offset = 0, int $limit = 0): ProjectionDocument[]"
        }, 
        {
            "location": "/projection/repositories/#findstring-type-string-id-projectiondocument", 
            "text": "Finds a single projection document by type and ID. In case its document cannot be found  null  should be returned.", 
            "title": "find(string $type, string $id): ?ProjectionDocument"
        }, 
        {
            "location": "/projection/repositories/#clearstring-type-void", 
            "text": "Deletes all projection documents by type.", 
            "title": "clear(string $type): void"
        }, 
        {
            "location": "/projection/repositories/#saveprojectiondocument-document-void", 
            "text": "Saves a projection document. The document will be available on any subsequent query.", 
            "title": "save(ProjectionDocument $document): void"
        }, 
        {
            "location": "/projection/repositories/#deletestring-type-string-id-void", 
            "text": "Deletes a projection document by type and ID. The document will be unavailable on any subsequent query.", 
            "title": "delete(string $type, string $id): void"
        }, 
        {
            "location": "/projection/repositories/#implementations", 
            "text": "", 
            "title": "Implementations"
        }, 
        {
            "location": "/projection/repositories/#msgphpdomaininfraelasticsearchprojectionrepository", 
            "text": "An Elasticsearch tailored projection repository.   Read more", 
            "title": "MsgPhp\\Domain\\Infra\\Elasticsearch\\ProjectionRepository"
        }, 
        {
            "location": "/projection/repositories/#basic-example", 
            "text": "?php  use   MsgPhp\\Domain\\Projection\\ { ProjectionDocument ,   ProjectionInterface ,   ProjectionRepositoryInterface };  // --- SETUP ---  class   MyProjection   implements   ProjectionInterface  { \n     public   static   function   fromDocument ( array   $document ) :   ProjectionInterface \n     { \n         // ... \n     }  }  /** @var ProjectionRepositoryInterface $repository */  $repository   =   ... ;  // --- USAGE ---  $id   =   ... ;  $document   =   $repository - find ( MyProjection :: class ,   $id );  if   ( null   ===   $projection )   { \n     $document   =   ProjectionDocument :: create ( MyProjection :: class ,   $id ,   [ \n         some_field   =   value , \n     ]); \n     $repository - save ( $document );  }", 
            "title": "Basic example"
        }, 
        {
            "location": "/projection/synchronization/", 
            "text": "Projection Synchronization\n\n\nMsgPhp\\Domain\\Projection\\ProjectionSynchronization\n is a utility domain service. Its purpose is to ease synchronizing\n\nprojection documents\n from source objects.\n\n\nAPI\n\n\nsynchronize(): iterable\n\n\nYields all projection documents attempted to be synchronized. The actual document status can be read from \nProjectionDocument::$status\n.\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\Projection\\\n{\nProjectionDocument\n,\n \nProjectionDocumentProvider\n,\n \nProjectionDocumentTransformerInterface\n,\n \nProjectionRepositoryInterface\n,\n \nProjectionSynchronization\n,\n \nProjectionTypeRegistryInterface\n};\n\n\n\n// --- SETUP ---\n\n\n\nclass\n \nMyEntity\n\n\n{\n\n    \npublic\n \n$id\n;\n\n\n    \npublic\n \nfunction\n \n__construct\n(\n$id\n)\n\n    \n{\n\n        \n$this\n-\nid\n \n=\n \n$id\n;\n\n    \n}\n\n\n}\n\n\n\n/** @var ProjectionTypeRegistryInterface $typeRegistry */\n\n\n$typeRegistry\n \n=\n \n...\n;\n\n\n/** @var ProjectionRepositoryInterface $repository */\n\n\n$repository\n \n=\n \n...\n;\n\n\n/** @var ProjectionDocumentTransformerInterface $transformer */\n\n\n$transformer\n \n=\n \n...\n;\n\n\n$provider\n \n=\n \nnew\n \nProjectionDocumentProvider\n(\n$transformer\n,\n \n[\n\n    \nfunction\n \n()\n:\n \niterable\n \n{\n\n        \nyield\n \nnew\n \nMyEntity\n(\n1\n);\n\n        \nyield\n \nnew\n \nMyEntity\n(\n2\n);\n\n    \n},\n\n\n]);\n\n\n$synchronization\n \n=\n \nnew\n \nProjectionSynchronization\n(\n$typeRegistry\n,\n \n$repository\n,\n \n$provider\n);\n\n\n\n// --- USAGE ---\n\n\n\nforeach\n \n(\n$synchronization\n-\nsynchronize\n()\n \nas\n \n$document\n)\n \n{\n\n    \nif\n \n(\nProjectionDocument\n::\nSTATUS_SYNCHRONIZED\n \n===\n \n$document\n-\nstatus\n)\n \n{\n\n        \necho\n \nSynchronized projection for \n.\nget_class\n(\n$document\n-\nsource\n)\n.\n with ID \n.\n$document\n-\nsource\n-\nid\n.\nPHP_EOL\n;\n\n        \ncontinue\n;\n\n    \n}\n\n\n    \necho\n \nInvalid projection for \n.\nget_class\n(\n$document\n-\nsource\n)\n.\n with ID \n.\n$document\n-\nsource\n-\nid\n.\nPHP_EOL\n;\n\n\n    \nif\n \n(\nnull\n \n!==\n \n$document\n-\nerror\n)\n \n{\n\n        \necho\n \nAn error occurred for \n.\nget_class\n(\n$document\n-\nsource\n)\n.\n with ID \n.\n$document\n-\nsource\n-\nid\n.\nPHP_EOL\n;\n\n        \necho\n \n$document\n-\nerror\n-\ngetMessage\n()\n.\n in \n.\n$document\n-\nerror\n-\ngetFile\n()\n.\n at \n.\n$document\n-\nerror\n-\ngetLine\n()\n.\nPHP_EOL\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\nCommand Line Interface\n\n\nA synchronization can be ran using the CLI when working with Symfony Console.\n\n\n\n\nRead more", 
            "title": "Synchronization"
        }, 
        {
            "location": "/projection/synchronization/#projection-synchronization", 
            "text": "MsgPhp\\Domain\\Projection\\ProjectionSynchronization  is a utility domain service. Its purpose is to ease synchronizing projection documents  from source objects.", 
            "title": "Projection Synchronization"
        }, 
        {
            "location": "/projection/synchronization/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/projection/synchronization/#synchronize-iterable", 
            "text": "Yields all projection documents attempted to be synchronized. The actual document status can be read from  ProjectionDocument::$status .", 
            "title": "synchronize(): iterable"
        }, 
        {
            "location": "/projection/synchronization/#basic-example", 
            "text": "?php  use   MsgPhp\\Domain\\Projection\\ { ProjectionDocument ,   ProjectionDocumentProvider ,   ProjectionDocumentTransformerInterface ,   ProjectionRepositoryInterface ,   ProjectionSynchronization ,   ProjectionTypeRegistryInterface };  // --- SETUP ---  class   MyEntity  { \n     public   $id ; \n\n     public   function   __construct ( $id ) \n     { \n         $this - id   =   $id ; \n     }  }  /** @var ProjectionTypeRegistryInterface $typeRegistry */  $typeRegistry   =   ... ;  /** @var ProjectionRepositoryInterface $repository */  $repository   =   ... ;  /** @var ProjectionDocumentTransformerInterface $transformer */  $transformer   =   ... ;  $provider   =   new   ProjectionDocumentProvider ( $transformer ,   [ \n     function   () :   iterable   { \n         yield   new   MyEntity ( 1 ); \n         yield   new   MyEntity ( 2 ); \n     },  ]);  $synchronization   =   new   ProjectionSynchronization ( $typeRegistry ,   $repository ,   $provider );  // --- USAGE ---  foreach   ( $synchronization - synchronize ()   as   $document )   { \n     if   ( ProjectionDocument :: STATUS_SYNCHRONIZED   ===   $document - status )   { \n         echo   Synchronized projection for  . get_class ( $document - source ) .  with ID  . $document - source - id . PHP_EOL ; \n         continue ; \n     } \n\n     echo   Invalid projection for  . get_class ( $document - source ) .  with ID  . $document - source - id . PHP_EOL ; \n\n     if   ( null   !==   $document - error )   { \n         echo   An error occurred for  . get_class ( $document - source ) .  with ID  . $document - source - id . PHP_EOL ; \n         echo   $document - error - getMessage () .  in  . $document - error - getFile () .  at  . $document - error - getLine () . PHP_EOL ; \n     }  }", 
            "title": "Basic example"
        }, 
        {
            "location": "/projection/synchronization/#command-line-interface", 
            "text": "A synchronization can be ran using the CLI when working with Symfony Console.   Read more", 
            "title": "Command Line Interface"
        }, 
        {
            "location": "/infrastructure/api-platform/", 
            "text": "API Platform\n\n\nAn overview of available infrastructural code when using \nAPI Platform\n.\n\n\n\n\nRequires \napi-platform/core\n\n\n\n\nProjection Data Provider\n\n\nWhen working with \nprojections\n an \nAPI Data Provider\n is provided by \nMsgPhp\\Domain\\Infra\\ApiPlatform\\ProjectionDataProvider\n.\nIt uses any \nprojection repository\n in an effort to provide API resources. \n\n\nMinimal configuration\n\n\napi_platform\n:\n\n    \n# ...\n\n\n    \nresource_class_directories\n:\n\n        \n-\n \n%kernel.project_dir%/src/Api/Projection\n\n\n\nservices\n:\n\n    \n# ..\n\n\n.\n\n    \nMsgPhp\\Domain\\Infra\\ApiPlatform\\ProjectionDataProvider\n:\n\n        \ntags\n:\n \n[\napi_platform.collection_data_provider\n]\n\n        \nautowire\n:\n \ntrue\n\n\n\n\n\n\n\n\nNote\n\n\nSee also \nAPI Platform Configuration\n documentation\n\n\n\n\nBasic example\n\n\n?php\n\n\n\nnamespace\n \nApp\\Api\\Projection\n;\n\n\n\nuse\n \nApiPlatform\\Core\\Annotation\\ApiProperty\n;\n\n\nuse\n \nApiPlatform\\Core\\Annotation\\ApiResource\n;\n\n\nuse\n \nMsgPhp\\Domain\\Projection\\ProjectionInterface\n;\n\n\n\n/**\n\n\n * @ApiResource(shortName=\nSome\n)\n\n\n */\n\n\nclass\n \nSomeProjection\n \nimplements\n \nProjectionInterface\n\n\n{\n\n    \n/**\n\n\n     * @ApiProperty(identifier=true)\n\n\n     */\n\n    \npublic\n \n$id\n;\n\n\n    \npublic\n \nstatic\n \nfunction\n \nfromDocument\n(\narray\n \n$document\n)\n:\n \nProjectionInterface\n\n    \n{\n\n        \n$projection\n \n=\n \nnew\n \nself\n();\n\n        \n$projection\n-\nid\n \n=\n \n$document\n[\nid\n]\n \n??\n \nnull\n;\n\n\n        \nreturn\n \n$projection\n;\n\n    \n}\n\n\n}", 
            "title": "API Platform"
        }, 
        {
            "location": "/infrastructure/api-platform/#api-platform", 
            "text": "An overview of available infrastructural code when using  API Platform .   Requires  api-platform/core", 
            "title": "API Platform"
        }, 
        {
            "location": "/infrastructure/api-platform/#projection-data-provider", 
            "text": "When working with  projections  an  API Data Provider  is provided by  MsgPhp\\Domain\\Infra\\ApiPlatform\\ProjectionDataProvider .\nIt uses any  projection repository  in an effort to provide API resources.", 
            "title": "Projection Data Provider"
        }, 
        {
            "location": "/infrastructure/api-platform/#minimal-configuration", 
            "text": "api_platform : \n     # ... \n\n     resource_class_directories : \n         -   %kernel.project_dir%/src/Api/Projection  services : \n     # ..  . \n     MsgPhp\\Domain\\Infra\\ApiPlatform\\ProjectionDataProvider : \n         tags :   [ api_platform.collection_data_provider ] \n         autowire :   true    Note  See also  API Platform Configuration  documentation", 
            "title": "Minimal configuration"
        }, 
        {
            "location": "/infrastructure/api-platform/#basic-example", 
            "text": "?php  namespace   App\\Api\\Projection ;  use   ApiPlatform\\Core\\Annotation\\ApiProperty ;  use   ApiPlatform\\Core\\Annotation\\ApiResource ;  use   MsgPhp\\Domain\\Projection\\ProjectionInterface ;  /**   * @ApiResource(shortName= Some )   */  class   SomeProjection   implements   ProjectionInterface  { \n     /**       * @ApiProperty(identifier=true)       */ \n     public   $id ; \n\n     public   static   function   fromDocument ( array   $document ) :   ProjectionInterface \n     { \n         $projection   =   new   self (); \n         $projection - id   =   $document [ id ]   ??   null ; \n\n         return   $projection ; \n     }  }", 
            "title": "Basic example"
        }, 
        {
            "location": "/infrastructure/doctrine-collections/", 
            "text": "Doctrine Collections\n\n\nAn overview of available infrastructural code when using Doctrine's \nCollections\n.\n\n\n\n\nRequires \ndoctrine/collections\n\n\n\n\nDomain Collection\n\n\nA Doctrine tailored \ndomain collection\n is provided by \nMsgPhp\\Domain\\Infra\\Doctrine\\DomainCollection\n.\nIt decorates any \nDoctrine\\Common\\Collections\\Collection\n type.\n\n\n\n\n__construct(Collection $collection)\n\n\n$collection\n: The decorated collection\n\n\n\n\n\n\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nDoctrine\\Common\\Collections\\ArrayCollection\n;\n\n\nuse\n \nMsgPhp\\Domain\\Infra\\Doctrine\\DomainCollection\n;\n\n\n\n// --- SETUP ---\n\n\n\n$collection\n \n=\n \nnew\n \nDomainCollection\n(\nnew\n \nArrayCollection\n([\n1\n,\n \n2\n,\n \n3\n]));\n\n\n\n// static\n\n\n\n$collection\n \n=\n \nDomainCollection\n::\nfromValue\n([\n1\n,\n \n2\n,\n \n3\n]);", 
            "title": "Doctrine Collections"
        }, 
        {
            "location": "/infrastructure/doctrine-collections/#doctrine-collections", 
            "text": "An overview of available infrastructural code when using Doctrine's  Collections .   Requires  doctrine/collections", 
            "title": "Doctrine Collections"
        }, 
        {
            "location": "/infrastructure/doctrine-collections/#domain-collection", 
            "text": "A Doctrine tailored  domain collection  is provided by  MsgPhp\\Domain\\Infra\\Doctrine\\DomainCollection .\nIt decorates any  Doctrine\\Common\\Collections\\Collection  type.   __construct(Collection $collection)  $collection : The decorated collection", 
            "title": "Domain Collection"
        }, 
        {
            "location": "/infrastructure/doctrine-collections/#basic-example", 
            "text": "?php  use   Doctrine\\Common\\Collections\\ArrayCollection ;  use   MsgPhp\\Domain\\Infra\\Doctrine\\DomainCollection ;  // --- SETUP ---  $collection   =   new   DomainCollection ( new   ArrayCollection ([ 1 ,   2 ,   3 ]));  // static  $collection   =   DomainCollection :: fromValue ([ 1 ,   2 ,   3 ]);", 
            "title": "Basic example"
        }, 
        {
            "location": "/infrastructure/doctrine-dbal/", 
            "text": "Doctrine Database Abstraction Layer\n\n\nAn overview of available infrastructural code when using Doctrine's \nDatabase Abstraction Layer\n.\n\n\n\n\nRequires \ndoctrine/dbal\n\n\n\n\nDomain Identifier Type\n\n\nA translation between the database type and a \ndomain identifier\n type in PHP is provided by\n\nMsgPhp\\Domain\\Infra\\Doctrine\\DomainIdType\n. Its purpose is to abstract the underlying data type of the identifier\nvalue.\n\n\nThe design is based on \nlate static bindings\n, due the design of the Doctrine type system itself. It extends from the\ndefault \nType\n implementation and can be used either generic or as a base class for custom identifiers\n(which in turn require custom types).\n\n\n\n\nstatic setClass(string $class): void\n\n\n$class\n: A sub class of \nDomainIdInterface\n to use as PHP value. If not set the \ndefault identifier\n\n  is used.\n\n\n\n\n\n\nstatic getClass(): string\n\n\nstatic setDataType(string $type): void\n\n\n$type\n: A Doctrine type name to use as underlying data type. If not set \nType::INTEGER\n is used.\n\n\n\n\n\n\nstatic getDataType(): string\n\n\n\n\n\n\nNote\n\n\nSee the \nreference\n page for all available identifier types provided per\ndomain\n\n\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nDoctrine\\DBAL\\Types\\Type\n;\n\n\nuse\n \nMsgPhp\\Domain\\DomainId\n;\n\n\nuse\n \nMsgPhp\\Domain\\Infra\\Doctrine\\DomainIdType\n;\n\n\n\n// --- SETUP ---\n\n\n\nclass\n \nMyDomainId\n \nextends\n \nDomainId\n\n\n{\n\n\n}\n\n\n\nclass\n \nMyDomainIdType\n \nextends\n \nDomainIdType\n\n\n{\n\n    \npublic\n \nconst\n \nNAME\n \n=\n \nmy_domain_id\n;\n\n\n}\n\n\n\nType\n::\naddType\n(\nMyDomainId\n::\nNAME\n,\n \nMyDomainId\n::\nclass\n);\n\n\n\n// --- USAGE ---\n\n\n\nMyDomainIdType\n::\nsetClass\n(\nMyDomainId\n::\nclass\n);\n\n\nMyDomainIdType\n::\nsetDataType\n(\nType\n::\nGUID\n);\n\n\n\n\n\n\nTo leverage the tailored \nUUID identifier\n use a data type from\n\nramsey/uuid-doctrine\n instead.\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\Infra\\Uuid\\DomainId\n \nas\n \nDomainUuid\n;\n\n\nuse\n \nRamsey\\Uuid\\Doctrine\\UuidType\n;\n\n\n\nMyDomainIdType\n::\nsetClass\n(\nDomainUuid\n::\nclass\n);\n\n\nMyDomainIdType\n::\nsetDataType\n(\nUuidType\n::\nNAME\n);", 
            "title": "Doctrine DBAL"
        }, 
        {
            "location": "/infrastructure/doctrine-dbal/#doctrine-database-abstraction-layer", 
            "text": "An overview of available infrastructural code when using Doctrine's  Database Abstraction Layer .   Requires  doctrine/dbal", 
            "title": "Doctrine Database Abstraction Layer"
        }, 
        {
            "location": "/infrastructure/doctrine-dbal/#domain-identifier-type", 
            "text": "A translation between the database type and a  domain identifier  type in PHP is provided by MsgPhp\\Domain\\Infra\\Doctrine\\DomainIdType . Its purpose is to abstract the underlying data type of the identifier\nvalue.  The design is based on  late static bindings , due the design of the Doctrine type system itself. It extends from the\ndefault  Type  implementation and can be used either generic or as a base class for custom identifiers\n(which in turn require custom types).   static setClass(string $class): void  $class : A sub class of  DomainIdInterface  to use as PHP value. If not set the  default identifier \n  is used.    static getClass(): string  static setDataType(string $type): void  $type : A Doctrine type name to use as underlying data type. If not set  Type::INTEGER  is used.    static getDataType(): string    Note  See the  reference  page for all available identifier types provided per\ndomain", 
            "title": "Domain Identifier Type"
        }, 
        {
            "location": "/infrastructure/doctrine-dbal/#basic-example", 
            "text": "?php  use   Doctrine\\DBAL\\Types\\Type ;  use   MsgPhp\\Domain\\DomainId ;  use   MsgPhp\\Domain\\Infra\\Doctrine\\DomainIdType ;  // --- SETUP ---  class   MyDomainId   extends   DomainId  {  }  class   MyDomainIdType   extends   DomainIdType  { \n     public   const   NAME   =   my_domain_id ;  }  Type :: addType ( MyDomainId :: NAME ,   MyDomainId :: class );  // --- USAGE ---  MyDomainIdType :: setClass ( MyDomainId :: class );  MyDomainIdType :: setDataType ( Type :: GUID );   To leverage the tailored  UUID identifier  use a data type from ramsey/uuid-doctrine  instead.  ?php  use   MsgPhp\\Domain\\Infra\\Uuid\\DomainId   as   DomainUuid ;  use   Ramsey\\Uuid\\Doctrine\\UuidType ;  MyDomainIdType :: setClass ( DomainUuid :: class );  MyDomainIdType :: setDataType ( UuidType :: NAME );", 
            "title": "Basic example"
        }, 
        {
            "location": "/infrastructure/doctrine-orm/", 
            "text": "Doctrine Object Relational Mapper\n\n\nAn overview of available infrastructural code when using Doctrine's \nObject Relational Mapper\n.\n\n\n\n\nRequires \ndoctrine/orm\n\n\n\n\nDomain Identity Mapping\n\n\nA Doctrine tailored \ndomain identity mapping\n is provided by\n\nMsgPhp\\Domain\\Infra\\Doctrine\\DomainIdentityMapping\n. It uses Doctrine's \nEntityManagerInterface\n to provide\nthe identity mapping from its class metadata.\n\n\n\n\n__construct(EntityManagerInterface $em, array $classMapping = [])\n\n\n$em\n: The entity manager to use\n\n\n$classMapping\n: Global class mapping. Usually used to map abstracts to concretes.\n\n\n\n\n\n\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nDoctrine\\ORM\\EntityManagerInterface\n;\n\n\nuse\n \nMsgPhp\\Domain\\Infra\\Doctrine\\DomainIdentityMapping\n;\n\n\n\n// --- SETUP ---\n\n\n\n/** @var EntityManagerInterface $em */\n\n\n$em\n \n=\n \n...\n;\n\n\n$mapping\n \n=\n \nnew\n \nDomainIdentityMapping\n(\n$em\n);\n\n\n\n\n\n\nDomain Repository\n\n\nA Doctrine tailored \ndomain repository trait\n is provided by\n\nMsgPhp\\Domain\\Infra\\Doctrine\\DomainEntityRepositoryTrait\n. It uses Doctrine's \nEntityManagerInterface\n as\nunderlying persistence layer.\n\n\n\n\n__construct(string $class, EntityManagerInterface $em, DomainIdentityHelper $identityHelper = null)\n\n\n$class\n: The entity class this repository is tied to\n\n\n$em\n: The entity manager to use\n\n\n$identityHelper\n: Custom domain identity helper. By default it's resolved from the given entity manager.\n  \nRead more\n.\n\n\n\n\n\n\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nDoctrine\\ORM\\EntityManagerInterface\n;\n\n\nuse\n \nDoctrine\\ORM\\Mapping\n \nas\n \nORM\n;\n\n\nuse\n \nMsgPhp\\Domain\\Infra\\Doctrine\\DomainEntityRepositoryTrait\n;\n\n\n\n// --- SETUP ---\n\n\n\n/** @ORM\\Entity() */\n\n\nclass\n \nMyEntity\n\n\n{\n\n    \n/** @ORM\\Id() @ORM\\Column(type=\nstring\n) */\n\n    \npublic\n \n$name\n;\n\n\n    \n/** @ORM\\Id() @ORM\\Column(type=\ninteger\n) */\n\n    \npublic\n \n$year\n;\n\n\n}\n\n\n\n\nclass\n \nMyEntityRepository\n\n\n{\n\n    \nuse\n \nDomainEntityRepositoryTrait\n \n{\n\n        \ndoFind\n \nas\n \npublic\n \nfind\n;\n\n        \ndoExists\n \nas\n \npublic\n \nexists\n;\n\n        \ndoSave\n \nas\n \npublic\n \nsave\n;\n\n    \n}\n\n\n    \nprivate\n \n$alias\n \n=\n \nmy_entity\n;\n\n\n}\n\n\n\n/** @var EntityManagerInterface $em */\n\n\n$em\n \n=\n \n...\n;\n\n\n$repository\n \n=\n \nnew\n \nMyEntityRepository\n(\nMyEntity\n::\nclass\n,\n \n$em\n);\n\n\n\n// --- USAGE ---\n\n\n\nif\n \n(\n$repository\n-\nexists\n(\n$id\n \n=\n \n[\nname\n \n=\n \n...\n,\n \nyear\n \n=\n \n...\n]))\n \n{\n\n    \n$entity\n \n=\n \n$repository\n-\nfind\n(\n$id\n);\n\n\n}\n \nelse\n \n{\n\n    \n$entity\n \n=\n \nnew\n \nMyEntity\n();\n\n    \n$entity\n-\nname\n \n=\n \n...\n;\n\n    \n$entity\n-\nyear\n \n=\n \n...\n;\n\n\n    \n$repository\n-\nsave\n(\n$entity\n);\n\n\n}\n\n\n\n\n\n\nEntity Aware Factory\n\n\nA Doctrine tailored \nentity aware factory\n is provided by\n\nMsgPhp\\Domain\\Infra\\Doctrine\\EntityAwareFactory\n. It decorates any entity aware factory and uses Doctrine's\n\nEntityManagerInterface\n. Its purpose is to create lazy-loading references when using \nreference()\n (see \n\nEntityManagerInterface::getReference()\n) and handle an entity its discriminator map when working\nwith \ninheritance\n.\n\n\n\n\n__construct(EntityAwareFactoryInterface $factory, EntityManagerInterface $em, array $classMapping = [])\n\n\n$factory\n: The decorated factory\n\n\n$em\n: The entity manager to use\n\n\n$classMapping\n: Global class mapping. Usually used to map abstracts to concretes.\n\n\n\n\n\n\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nDoctrine\\ORM\\EntityManagerInterface\n;\n\n\nuse\n \nDoctrine\\ORM\\Mapping\n \nas\n \nORM\n;\n\n\nuse\n \nMsgPhp\\Domain\\Factory\\\n{\nDomainObjectFactory\n,\n \nEntityAwareFactory\n \nas\n \nBaseEntityAwareFactory\n};\n\n\nuse\n \nMsgPhp\\Domain\\Infra\\Doctrine\\\n{\nDomainIdentityMapping\n,\n \nEntityAwareFactory\n};\n\n\n\n// --- SETUP ---\n\n\n\n/**\n\n\n * @ORM\\Entity()\n\n\n * @ORM\\InheritanceType(\nJOINED\n)\n\n\n * @ORM\\DiscriminatorColumn(name=\ndiscriminator\n, type=\nstring\n)\n\n\n * @ORM\\DiscriminatorMap({\nself\n = \nMyEntity\n, \nother\n = \nMyOtherEntity\n})\n\n\n */\n\n\nclass\n \nMyEntity\n\n\n{\n\n    \npublic\n \nconst\n \nTYPE_SELF\n \n=\n \nself\n;\n\n    \npublic\n \nconst\n \nTYPE_OTHER\n \n=\n \nother\n;\n\n\n    \n/** @ORM\\Id() @ORM\\Column(type=\ninteger\n) */\n\n    \npublic\n \n$id\n;\n\n\n}\n\n\n\n/** @ORM\\Entity */\n\n\nclass\n \nMyOtherEntity\n \nextends\n \nMyEntity\n\n\n{\n\n\n}\n\n\n\n/** @var EntityManagerInterface $em */\n\n\n$em\n \n=\n \n...\n;\n\n\n$factory\n \n=\n \nnew\n \nEntityAwareFactory\n(\n\n    \nnew\n \nBaseEntityAwareFactory\n(\n\n        \nnew\n \nDomainObjectFactory\n(),\n\n        \nnew\n \nDomainIdentityMapping\n(\n$em\n)\n\n    \n),\n\n    \n$em\n\n\n);\n\n\n\n// --- USAGE ---\n\n\n\n/** @var MyEntity $ref */\n\n\n$ref\n \n=\n \n$factory\n-\nreference\n(\nMyEntity\n::\nclass\n,\n \n1\n);\n \n// no database hit\n\n\n\n/** @var MyOtherEntity $otherRef */\n\n\n$otherRef\n \n=\n \n$factory\n-\nreference\n(\nMyEntity\n::\nclass\n,\n \n[\n\n    \nid\n \n=\n \n1\n,\n\n    \ndiscriminator\n \n=\n \nMyEntity\n::\nTYPE_OTHER\n\n\n]);\n\n\n\n/** @var MyOtherEntity $otherEntity */\n\n\n$otherEntity\n \n=\n \n$factory\n-\ncreate\n(\nMyEntity\n::\nclass\n,\n \n[\n\n    \ndiscriminator\n \n=\n \nMyEntity\n::\nTYPE_OTHER\n,\n\n\n]);\n\n\n\n\n\n\nDomain Identifier Hydration\n\n\nWhen working with \ndomain identifiers\n and its corresponding \ntype\n\na problem might occur when hydrating scalar values, e.g. using \nQuery::getScalarResult()\n.\n\n\nIt would use instances of \nMsgPhp\\Domain\\DomainIdInterface\n that can only be casted to string as its (true) scalar\nvalue (due to \n__toString()\n). In case the underlying data type is e.g. \ninteger\n it'll be lost.\n\n\nTo overcome, two hydration modes are available to hydrate the primitive identifier value instead.\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nDoctrine\\DBAL\\Types\\Type\n;\n\n\nuse\n \nDoctrine\\ORM\\EntityManagerInterface\n;\n\n\nuse\n \nDoctrine\\ORM\\Mapping\n \nas\n \nORM\n;\n\n\nuse\n \nMsgPhp\\Domain\\DomainId\n;\n\n\nuse\n \nMsgPhp\\Domain\\Infra\\Doctrine\\DomainIdType\n;\n\n\nuse\n \nMsgPhp\\Domain\\Infra\\Doctrine\\Hydration\\\n{\nScalarHydrator\n,\n \nSingleScalarHydrator\n};\n\n\n\n// --- SETUP ---\n\n\n\n/** @ORM\\Entity() */\n\n\nclass\n \nMyEntity\n\n\n{\n\n    \n/** @var DomainId @ORM\\Id() @ORM\\Column(type=\nmsgphp_domain_id\n) */\n\n    \npublic\n \n$id\n;\n\n\n}\n\n\n\nDomainIdType\n::\nsetClass\n(\nDomainId\n::\nclass\n);\n\n\nDomainIdType\n::\nsetDataType\n(\nType\n::\nINTEGER\n);\n\n\nType\n::\naddType\n(\nDomainIdType\n::\nNAME\n,\n \nDomainIdType\n::\nclass\n);\n\n\n\n/** @var EntityManagerInterface $em */\n\n\n$em\n \n=\n \n...\n;\n\n\n$config\n \n=\n \n$em\n-\ngetConfiguration\n();\n\n\n\n$config\n-\naddCustomHydrationMode\n(\nScalarHydrator\n::\nNAME\n,\n \nScalarHydrator\n::\nclass\n);\n\n\n$config\n-\naddCustomHydrationMode\n(\nSingleScalarHydrator\n::\nNAME\n,\n \nSingleScalarHydrator\n::\nclass\n);\n\n\n\n// --- USAGE ---\n\n\n\n$query\n \n=\n \n$em\n-\ncreateQuery\n(\nSELECT entity.id FROM MyEntity entity\n);\n\n\n\n$query\n-\ngetScalarResult\n()[\n0\n][\nid\n];\n \n// \n1\n\n\n$query\n-\ngetResult\n(\nScalarHydrator\n::\nNAME\n)[\n0\n][\nid\n];\n \n// int(1)\n\n\n\n$query\n-\ngetSingleScalarResult\n();\n \n// \n1\n\n\n$query\n-\ngetSingleResult\n(\nSingleScalarHydrator\n::\nNAME\n);\n \n// int(1)", 
            "title": "Doctrine ORM"
        }, 
        {
            "location": "/infrastructure/doctrine-orm/#doctrine-object-relational-mapper", 
            "text": "An overview of available infrastructural code when using Doctrine's  Object Relational Mapper .   Requires  doctrine/orm", 
            "title": "Doctrine Object Relational Mapper"
        }, 
        {
            "location": "/infrastructure/doctrine-orm/#domain-identity-mapping", 
            "text": "A Doctrine tailored  domain identity mapping  is provided by MsgPhp\\Domain\\Infra\\Doctrine\\DomainIdentityMapping . It uses Doctrine's  EntityManagerInterface  to provide\nthe identity mapping from its class metadata.   __construct(EntityManagerInterface $em, array $classMapping = [])  $em : The entity manager to use  $classMapping : Global class mapping. Usually used to map abstracts to concretes.", 
            "title": "Domain Identity Mapping"
        }, 
        {
            "location": "/infrastructure/doctrine-orm/#basic-example", 
            "text": "?php  use   Doctrine\\ORM\\EntityManagerInterface ;  use   MsgPhp\\Domain\\Infra\\Doctrine\\DomainIdentityMapping ;  // --- SETUP ---  /** @var EntityManagerInterface $em */  $em   =   ... ;  $mapping   =   new   DomainIdentityMapping ( $em );", 
            "title": "Basic example"
        }, 
        {
            "location": "/infrastructure/doctrine-orm/#domain-repository", 
            "text": "A Doctrine tailored  domain repository trait  is provided by MsgPhp\\Domain\\Infra\\Doctrine\\DomainEntityRepositoryTrait . It uses Doctrine's  EntityManagerInterface  as\nunderlying persistence layer.   __construct(string $class, EntityManagerInterface $em, DomainIdentityHelper $identityHelper = null)  $class : The entity class this repository is tied to  $em : The entity manager to use  $identityHelper : Custom domain identity helper. By default it's resolved from the given entity manager.\n   Read more .", 
            "title": "Domain Repository"
        }, 
        {
            "location": "/infrastructure/doctrine-orm/#basic-example_1", 
            "text": "?php  use   Doctrine\\ORM\\EntityManagerInterface ;  use   Doctrine\\ORM\\Mapping   as   ORM ;  use   MsgPhp\\Domain\\Infra\\Doctrine\\DomainEntityRepositoryTrait ;  // --- SETUP ---  /** @ORM\\Entity() */  class   MyEntity  { \n     /** @ORM\\Id() @ORM\\Column(type= string ) */ \n     public   $name ; \n\n     /** @ORM\\Id() @ORM\\Column(type= integer ) */ \n     public   $year ;  }  class   MyEntityRepository  { \n     use   DomainEntityRepositoryTrait   { \n         doFind   as   public   find ; \n         doExists   as   public   exists ; \n         doSave   as   public   save ; \n     } \n\n     private   $alias   =   my_entity ;  }  /** @var EntityManagerInterface $em */  $em   =   ... ;  $repository   =   new   MyEntityRepository ( MyEntity :: class ,   $em );  // --- USAGE ---  if   ( $repository - exists ( $id   =   [ name   =   ... ,   year   =   ... ]))   { \n     $entity   =   $repository - find ( $id );  }   else   { \n     $entity   =   new   MyEntity (); \n     $entity - name   =   ... ; \n     $entity - year   =   ... ; \n\n     $repository - save ( $entity );  }", 
            "title": "Basic example"
        }, 
        {
            "location": "/infrastructure/doctrine-orm/#entity-aware-factory", 
            "text": "A Doctrine tailored  entity aware factory  is provided by MsgPhp\\Domain\\Infra\\Doctrine\\EntityAwareFactory . It decorates any entity aware factory and uses Doctrine's EntityManagerInterface . Its purpose is to create lazy-loading references when using  reference()  (see  EntityManagerInterface::getReference() ) and handle an entity its discriminator map when working\nwith  inheritance .   __construct(EntityAwareFactoryInterface $factory, EntityManagerInterface $em, array $classMapping = [])  $factory : The decorated factory  $em : The entity manager to use  $classMapping : Global class mapping. Usually used to map abstracts to concretes.", 
            "title": "Entity Aware Factory"
        }, 
        {
            "location": "/infrastructure/doctrine-orm/#basic-example_2", 
            "text": "?php  use   Doctrine\\ORM\\EntityManagerInterface ;  use   Doctrine\\ORM\\Mapping   as   ORM ;  use   MsgPhp\\Domain\\Factory\\ { DomainObjectFactory ,   EntityAwareFactory   as   BaseEntityAwareFactory };  use   MsgPhp\\Domain\\Infra\\Doctrine\\ { DomainIdentityMapping ,   EntityAwareFactory };  // --- SETUP ---  /**   * @ORM\\Entity()   * @ORM\\InheritanceType( JOINED )   * @ORM\\DiscriminatorColumn(name= discriminator , type= string )   * @ORM\\DiscriminatorMap({ self  =  MyEntity ,  other  =  MyOtherEntity })   */  class   MyEntity  { \n     public   const   TYPE_SELF   =   self ; \n     public   const   TYPE_OTHER   =   other ; \n\n     /** @ORM\\Id() @ORM\\Column(type= integer ) */ \n     public   $id ;  }  /** @ORM\\Entity */  class   MyOtherEntity   extends   MyEntity  {  }  /** @var EntityManagerInterface $em */  $em   =   ... ;  $factory   =   new   EntityAwareFactory ( \n     new   BaseEntityAwareFactory ( \n         new   DomainObjectFactory (), \n         new   DomainIdentityMapping ( $em ) \n     ), \n     $em  );  // --- USAGE ---  /** @var MyEntity $ref */  $ref   =   $factory - reference ( MyEntity :: class ,   1 );   // no database hit  /** @var MyOtherEntity $otherRef */  $otherRef   =   $factory - reference ( MyEntity :: class ,   [ \n     id   =   1 , \n     discriminator   =   MyEntity :: TYPE_OTHER  ]);  /** @var MyOtherEntity $otherEntity */  $otherEntity   =   $factory - create ( MyEntity :: class ,   [ \n     discriminator   =   MyEntity :: TYPE_OTHER ,  ]);", 
            "title": "Basic example"
        }, 
        {
            "location": "/infrastructure/doctrine-orm/#domain-identifier-hydration", 
            "text": "When working with  domain identifiers  and its corresponding  type \na problem might occur when hydrating scalar values, e.g. using  Query::getScalarResult() .  It would use instances of  MsgPhp\\Domain\\DomainIdInterface  that can only be casted to string as its (true) scalar\nvalue (due to  __toString() ). In case the underlying data type is e.g.  integer  it'll be lost.  To overcome, two hydration modes are available to hydrate the primitive identifier value instead.", 
            "title": "Domain Identifier Hydration"
        }, 
        {
            "location": "/infrastructure/doctrine-orm/#basic-example_3", 
            "text": "?php  use   Doctrine\\DBAL\\Types\\Type ;  use   Doctrine\\ORM\\EntityManagerInterface ;  use   Doctrine\\ORM\\Mapping   as   ORM ;  use   MsgPhp\\Domain\\DomainId ;  use   MsgPhp\\Domain\\Infra\\Doctrine\\DomainIdType ;  use   MsgPhp\\Domain\\Infra\\Doctrine\\Hydration\\ { ScalarHydrator ,   SingleScalarHydrator };  // --- SETUP ---  /** @ORM\\Entity() */  class   MyEntity  { \n     /** @var DomainId @ORM\\Id() @ORM\\Column(type= msgphp_domain_id ) */ \n     public   $id ;  }  DomainIdType :: setClass ( DomainId :: class );  DomainIdType :: setDataType ( Type :: INTEGER );  Type :: addType ( DomainIdType :: NAME ,   DomainIdType :: class );  /** @var EntityManagerInterface $em */  $em   =   ... ;  $config   =   $em - getConfiguration ();  $config - addCustomHydrationMode ( ScalarHydrator :: NAME ,   ScalarHydrator :: class );  $config - addCustomHydrationMode ( SingleScalarHydrator :: NAME ,   SingleScalarHydrator :: class );  // --- USAGE ---  $query   =   $em - createQuery ( SELECT entity.id FROM MyEntity entity );  $query - getScalarResult ()[ 0 ][ id ];   //  1  $query - getResult ( ScalarHydrator :: NAME )[ 0 ][ id ];   // int(1)  $query - getSingleScalarResult ();   //  1  $query - getSingleResult ( SingleScalarHydrator :: NAME );   // int(1)", 
            "title": "Basic example"
        }, 
        {
            "location": "/infrastructure/elasticsearch/", 
            "text": "Elasticsearch\n\n\nAn overview of available infrastructural code when using Elasticsearch's \nPHP Api\n.\n\n\n\n\nRequires \nelasticsearch/elasticsearch\n\n\n\n\nProjection Type Registry\n\n\nAn Elasticsearch tailored \nprojection type registry\n is provided by \nMsgPhp\\Domain\\Infra\\Elasticsearch\\ProjectionTypeRegistry\n.\nIt works directly with any \nClient\n and a known configuration of type information.\n\n\n\n\n__construct(Client $client, string $index, array $mappings, array $settings = [], LoggerInterface $logger = null)\n\n\n$client\n: The client to work with\n\n\n$index\n: The index to use\n\n\n$mappings\n / \n$settings\n: Index management information. \nRead more\n.\n\n\n$logger\n: An optional \nPSR logger\n\n\n\n\n\n\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nElasticsearch\\Client\n;\n\n\nuse\n \nMsgPhp\\Domain\\Infra\\Elasticsearch\\ProjectionTypeRegistry\n;\n\n\nuse\n \nMsgPhp\\Domain\\Projection\\ProjectionInterface\n;\n\n\n\n// --- SETUP ---\n\n\n\nclass\n \nMyProjection\n \nimplements\n \nProjectionInterface\n\n\n{\n\n    \npublic\n \n$someField\n;\n\n    \npublic\n \n$otherField\n;\n\n\n    \npublic\n \nstatic\n \nfunction\n \nfromDocument\n(\narray\n \n$document\n)\n:\n \nProjectionInterface\n\n    \n{\n\n        \n$projection\n \n=\n \nnew\n \nstatic\n();\n\n        \n$projection\n-\nsomeField\n \n=\n \n$document\n[\nsome_field\n]\n \n??\n \nnull\n;\n\n        \n$projection\n-\notherField\n \n=\n \n$document\n[\nother_field\n]\n \n??\n \nnull\n;\n\n\n        \nreturn\n \n$projection\n;\n\n    \n}\n\n\n}\n\n\n\n/** @var Client $client */\n\n\n$client\n \n=\n \n...\n;\n\n\n$typeRegistry\n \n=\n \nnew\n \nProjectionTypeRegistry\n(\n$client\n,\n \nsome_index\n,\n \n[\n\n    \nMyProjection\n::\nclass\n \n=\n \n[\n\n        \nsome_field\n \n=\n \nsome_type\n,\n \n// defaults to [\ntype\n =\n \nsome_type\n]\n\n        \nother_field\n \n=\n \n[\n \n// defaults to [\ntype\n =\n \ntext\n, ...]\n\n            \n// ...\n\n        \n],\n\n    \n],\n\n\n]);\n\n\n\n\n\n\nAdvanced mapping example\n\n\n?php\n\n\n\nuse\n \nElasticsearch\\Client\n;\n\n\nuse\n \nMsgPhp\\Domain\\Infra\\Elasticsearch\\\n{\nDocumentMappingProviderInterface\n,\n \nProjectionTypeRegistry\n};\n\n\nuse\n \nMsgPhp\\Domain\\Projection\\ProjectionInterface\n;\n\n\n\n// --- SETUP ---\n\n\n\nclass\n \nMyProjection\n \nimplements\n \nProjectionInterface\n,\n \nDocumentMappingProviderInterface\n\n\n{\n\n    \n// ...\n\n\n    \npublic\n \nstatic\n \nfunction\n \nfromDocument\n(\narray\n \n$document\n)\n:\n \nProjectionInterface\n\n    \n{\n\n        \n// ...\n\n    \n}\n\n\n    \npublic\n \nstatic\n \nfunction\n \nprovideDocumentMappings\n()\n:\n \niterable\n\n    \n{\n\n        \nyield\n \nstatic\n::\nclass\n \n=\n \n[\n\n            \nsome_field\n \n=\n \nsome_type\n,\n\n            \nother_field\n \n=\n \n[\n\n                \n// ...\n\n            \n],\n\n        \n];\n\n    \n}\n\n\n}\n\n\n\n/** @var Client $client */\n\n\n$client\n \n=\n \n...\n;\n\n\n$typeRegistry\n \n=\n \nnew\n \nProjectionTypeRegistry\n(\n$client\n,\n \nsome_index\n,\n \n[\n\n    \nMyProjection\n::\nclass\n,\n\n\n]);\n\n\n\n\n\n\nProjection Repository\n\n\nAn Elasticsearch tailored \nprojection repository\n is provided by \nMsgPhp\\Domain\\Infra\\Elasticsearch\\ProjectionRepository\n.\nIt works directly with any \nClient\n.\n\n\n\n\n__construct(Client $client, string $index)\n\n\n$client\n: The Client to work with\n\n\n$index\n: The index to use\n\n\n\n\n\n\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nElasticsearch\\Client\n;\n\n\nuse\n \nMsgPhp\\Domain\\Infra\\Elasticsearch\\ProjectionRepository\n;\n\n\n\n// --- SETUP ---\n\n\n\n/** @var Client $client */\n\n\n$client\n \n=\n \n...\n;\n\n\n$repository\n \n=\n \nnew\n \nProjectionRepository\n(\n$client\n,\n \nsome_index\n);", 
            "title": "Elasticsearch"
        }, 
        {
            "location": "/infrastructure/elasticsearch/#elasticsearch", 
            "text": "An overview of available infrastructural code when using Elasticsearch's  PHP Api .   Requires  elasticsearch/elasticsearch", 
            "title": "Elasticsearch"
        }, 
        {
            "location": "/infrastructure/elasticsearch/#projection-type-registry", 
            "text": "An Elasticsearch tailored  projection type registry  is provided by  MsgPhp\\Domain\\Infra\\Elasticsearch\\ProjectionTypeRegistry .\nIt works directly with any  Client  and a known configuration of type information.   __construct(Client $client, string $index, array $mappings, array $settings = [], LoggerInterface $logger = null)  $client : The client to work with  $index : The index to use  $mappings  /  $settings : Index management information.  Read more .  $logger : An optional  PSR logger", 
            "title": "Projection Type Registry"
        }, 
        {
            "location": "/infrastructure/elasticsearch/#basic-example", 
            "text": "?php  use   Elasticsearch\\Client ;  use   MsgPhp\\Domain\\Infra\\Elasticsearch\\ProjectionTypeRegistry ;  use   MsgPhp\\Domain\\Projection\\ProjectionInterface ;  // --- SETUP ---  class   MyProjection   implements   ProjectionInterface  { \n     public   $someField ; \n     public   $otherField ; \n\n     public   static   function   fromDocument ( array   $document ) :   ProjectionInterface \n     { \n         $projection   =   new   static (); \n         $projection - someField   =   $document [ some_field ]   ??   null ; \n         $projection - otherField   =   $document [ other_field ]   ??   null ; \n\n         return   $projection ; \n     }  }  /** @var Client $client */  $client   =   ... ;  $typeRegistry   =   new   ProjectionTypeRegistry ( $client ,   some_index ,   [ \n     MyProjection :: class   =   [ \n         some_field   =   some_type ,   // defaults to [ type  =   some_type ] \n         other_field   =   [   // defaults to [ type  =   text , ...] \n             // ... \n         ], \n     ],  ]);", 
            "title": "Basic example"
        }, 
        {
            "location": "/infrastructure/elasticsearch/#advanced-mapping-example", 
            "text": "?php  use   Elasticsearch\\Client ;  use   MsgPhp\\Domain\\Infra\\Elasticsearch\\ { DocumentMappingProviderInterface ,   ProjectionTypeRegistry };  use   MsgPhp\\Domain\\Projection\\ProjectionInterface ;  // --- SETUP ---  class   MyProjection   implements   ProjectionInterface ,   DocumentMappingProviderInterface  { \n     // ... \n\n     public   static   function   fromDocument ( array   $document ) :   ProjectionInterface \n     { \n         // ... \n     } \n\n     public   static   function   provideDocumentMappings () :   iterable \n     { \n         yield   static :: class   =   [ \n             some_field   =   some_type , \n             other_field   =   [ \n                 // ... \n             ], \n         ]; \n     }  }  /** @var Client $client */  $client   =   ... ;  $typeRegistry   =   new   ProjectionTypeRegistry ( $client ,   some_index ,   [ \n     MyProjection :: class ,  ]);", 
            "title": "Advanced mapping example"
        }, 
        {
            "location": "/infrastructure/elasticsearch/#projection-repository", 
            "text": "An Elasticsearch tailored  projection repository  is provided by  MsgPhp\\Domain\\Infra\\Elasticsearch\\ProjectionRepository .\nIt works directly with any  Client .   __construct(Client $client, string $index)  $client : The Client to work with  $index : The index to use", 
            "title": "Projection Repository"
        }, 
        {
            "location": "/infrastructure/elasticsearch/#basic-example_1", 
            "text": "?php  use   Elasticsearch\\Client ;  use   MsgPhp\\Domain\\Infra\\Elasticsearch\\ProjectionRepository ;  // --- SETUP ---  /** @var Client $client */  $client   =   ... ;  $repository   =   new   ProjectionRepository ( $client ,   some_index );", 
            "title": "Basic example"
        }, 
        {
            "location": "/infrastructure/simple-bus/", 
            "text": "SimpleBus\n\n\nAn overview of available infrastructural code when using \nSimpleBus\n.\n\n\n\n\nRequires \nsimple-bus/message-bus\n\n\n\n\nDomain Message Bus\n\n\nA SimpleBus tailored \ndomain message bus\n is provided by \nMsgPhp\\Domain\\Infra\\SimpleBus\\DomainMessageBus\n.\nIt decorates any \nSimpleBus\\Message\\Bus\\MessageBus\n type.\n\n\n\n\n__construct(MessageBus $bus)\n\n\n$bus\n: The decorated bus\n\n\n\n\n\n\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\Infra\\SimpleBus\\DomainMessageBus\n;\n\n\nuse\n \nSimpleBus\\Message\\Bus\\MessageBus\n\n\n\n// --- SETUP ---\n\n\n\n/** @var MessageBus $bus */\n\n\n$bus\n \n=\n \n...\n;\n\n\n$domainBus\n \n=\n \nnew\n \nDomainMessageBus\n(\n$bus\n);\n\n\n\n// --- USAGE ---\n\n\n\n$result\n \n=\n \n$domainBus\n-\ndispatch\n(\nnew\n \nSomeMessage\n());", 
            "title": "SimpleBus"
        }, 
        {
            "location": "/infrastructure/simple-bus/#simplebus", 
            "text": "An overview of available infrastructural code when using  SimpleBus .   Requires  simple-bus/message-bus", 
            "title": "SimpleBus"
        }, 
        {
            "location": "/infrastructure/simple-bus/#domain-message-bus", 
            "text": "A SimpleBus tailored  domain message bus  is provided by  MsgPhp\\Domain\\Infra\\SimpleBus\\DomainMessageBus .\nIt decorates any  SimpleBus\\Message\\Bus\\MessageBus  type.   __construct(MessageBus $bus)  $bus : The decorated bus", 
            "title": "Domain Message Bus"
        }, 
        {
            "location": "/infrastructure/simple-bus/#basic-example", 
            "text": "?php  use   MsgPhp\\Domain\\Infra\\SimpleBus\\DomainMessageBus ;  use   SimpleBus\\Message\\Bus\\MessageBus  // --- SETUP ---  /** @var MessageBus $bus */  $bus   =   ... ;  $domainBus   =   new   DomainMessageBus ( $bus );  // --- USAGE ---  $result   =   $domainBus - dispatch ( new   SomeMessage ());", 
            "title": "Basic example"
        }, 
        {
            "location": "/infrastructure/symfony-console/", 
            "text": "Symfony Console\n\n\nAn overview of available infrastructural code when using \nSymfony Console\n.\n\n\n\n\nRequires \nsymfony/console\n\n\n\n\nCommands\n\n\nVarious standard \nconsole commands\n are available and can be used depending on implemented domain infrastructure. They\nare defined in the \nMsgPhp\\Domain\\Infra\\Console\\Command\\\n namespace.\n\n\nInitializeProjectionTypesCommand\n\n\nInitializes the \nprojection type registry\n.\n\n\nbin/console projection:initialize-types \n[\n--force\n]\n\n\n\n\n\n\nSynchronizeProjectionsCommand\n\n\nSynchronizes domain objects and their \nprojections\n using the \nprojection synchronization\n\nutility service.\n\n\nbin/console projection:synchronize\n\n\n\n\n\nContext Factory\n\n\nA context factory is bound to \nMsgPhp\\Domain\\Infra\\Console\\Context\\ContextFactoryInterface\n. Its purpose is to leverage\na CLI command in an effort to interactively built an arbitrary array value (the context).\n\n\nAPI\n\n\nconfigure(InputDefinition $definition): void\n\n\nConfigures a command input definition. See also \nInputDefinition\n. Should be called before using\n\ngetContext()\n.\n\n\n\n\ngetContext(InputInterface $input, StyleInterface $io, array $values = []): array\n\n\nResolves the actual context from the console IO. See also \nInputInterface\n and \nStyleInterface\n.\nAny element value provided by \n$values\n takes precedence and should be used as-is.\n\n\nImplementations\n\n\nMsgPhp\\Domain\\Infra\\Console\\Context\\ClassContextFactory\n\n\nFactorizes a context based on any class method signature. It configures the CLI signature by mapping required class\nmethod arguments to command arguments, whereas optional ones are mapped to command options.\n\n\nbin/console \ncommand\n --optional-argument \n[\n--\n]\n required-argument\n\n\n\n\n\nIn both cases a value is optional, if the actual class method argument is required and no value is given it will be\nasked interactively. If interaction is not possible an exception will be thrown instead.\n\n\n\n\n__construct(string $class, string $method, array $classMapping = [], int $flags = 0, ClassContextElementFactoryInterface $elementFactory = null)\n\n\n$class / $method\n: The class method to resolve\n\n\n$classMapping\n: Global class mapping. Usually used to map abstracts to concretes.\n\n\n$flags\n: A bit mask value to toggle various flags\n\n\nClassContextBuilder::ALWAYS_OPTIONAL\n: Always map class method arguments to command options\n\n\nClassContextBuilder::NO_DEFAULTS\n: Leave out default values when calling \ngetContext()\n\n\nClassContextBuilder::REUSE_DEFINITION\n: Reuse the original input definition for matching class method\n   arguments\n\n\n\n\n\n\n$elementFactory\n: A custom element factory to use. See also \nCustomizing context elements\n.\n\n\n\n\n\n\n\n\nCustomizing context elements\n\n\nPer-element configuration can be provided by implementing a \nMsgPhp\\Domain\\Infra\\Console\\Context\\ClassContextElementFactoryInterface\n.\n\n\n\n\ngetElement(string $class, string $method, string $argument): ContextElement\n\n\nGet a custom \nContextElement\n to apply to a specific class/method/argument pair\n\n\n\n\n\n\n\n\nA default implementation is provided by \nMsgPhp\\Domain\\Infra\\Console\\Context\\ClassContextElementFactory\n which simply\ntransforms argument names to human readable values so that \n$argumentName\n becomes \nArgument Name\n.\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\Infra\\Console\\Context\\ClassContextFactory\n;\n\n\nuse\n \nSymfony\\Component\\Console\\Command\\Command\n;\n\n\nuse\n \nSymfony\\Component\\Console\\Input\\InputInterface\n;\n\n\nuse\n \nSymfony\\Component\\Console\\Output\\OutputInterface\n;\n\n\nuse\n \nSymfony\\Component\\Console\\Style\\SymfonyStyle\n;\n\n\n\n// --- SETUP ---\n\n\n\nclass\n \nMyObject\n\n\n{\n\n    \npublic\n \nfunction\n \n__construct\n(\nstring\n \n$argument\n,\n \n$option\n \n=\n \nnull\n)\n\n    \n{\n\n    \n}\n\n\n}\n\n\n\nclass\n \nMyCommand\n \nextends\n \nCommand\n\n\n{\n\n    \nprivate\n \n$contextFactory\n;\n\n\n    \npublic\n \nfunction\n \n__construct\n()\n\n    \n{\n\n        \n$this\n-\ncontextFactory\n \n=\n \nnew\n \nClassContextFactory\n(\nMyObject\n::\nclass\n,\n \n__construct\n);\n\n\n        \nparent\n::\n__construct\n();\n\n    \n}\n\n\n    \nprotected\n \nfunction\n \nconfigure\n()\n:\n \nvoid\n\n    \n{\n\n       \n$this\n-\nsetName\n(\nmy-command\n);\n\n       \n$this\n-\ncontextFactory\n-\nconfigure\n(\n$this\n-\ngetDefinition\n());\n\n    \n}\n\n\n    \nprotected\n \nfunction\n \nexecute\n(\nInputInterface\n \n$input\n,\nOutputInterface\n \n$output\n)\n:\n \nint\n\n    \n{\n\n        \n$io\n \n=\n \nnew\n \nSymfonyStyle\n(\n$input\n,\n \n$output\n);\n\n        \n$context\n \n=\n \n$this\n-\ncontextFactory\n-\ngetContext\n(\n$input\n,\n \n$io\n);\n\n        \n$object\n \n=\n \nnew\n \nMyObject\n(\n...\narray_values\n(\n$context\n));\n\n\n        \n// do something\n\n\n        \nreturn\n \n0\n;\n\n    \n}\n\n\n}\n\n\n\n// --- USAGE ---\n\n\n\n// $ bin/console my-command [--option=OPTION] [--] [\nargument\n]\n\n\n\n\n\n\nMsgPhp\\Domain\\Infra\\Console\\Context\\DoctrineEntityContextFactory\n\n\nA \nDoctrine\n entity aware context factory. It decorates any context factory. Its purpose is to\nprovide a discriminator value into the resulting context when working with \ninheritance\n.\n\n\n\n\n__construct(ContextFactoryInterface $factory, EntityManagerInterface $em, string $class)\n\n\n$factory\n: The decorated context factory\n\n\n$em\n: The entity manager to use\n\n\n$class\n: The entity class to use", 
            "title": "Symfony Console"
        }, 
        {
            "location": "/infrastructure/symfony-console/#symfony-console", 
            "text": "An overview of available infrastructural code when using  Symfony Console .   Requires  symfony/console", 
            "title": "Symfony Console"
        }, 
        {
            "location": "/infrastructure/symfony-console/#commands", 
            "text": "Various standard  console commands  are available and can be used depending on implemented domain infrastructure. They\nare defined in the  MsgPhp\\Domain\\Infra\\Console\\Command\\  namespace.", 
            "title": "Commands"
        }, 
        {
            "location": "/infrastructure/symfony-console/#initializeprojectiontypescommand", 
            "text": "Initializes the  projection type registry .  bin/console projection:initialize-types  [ --force ]", 
            "title": "InitializeProjectionTypesCommand"
        }, 
        {
            "location": "/infrastructure/symfony-console/#synchronizeprojectionscommand", 
            "text": "Synchronizes domain objects and their  projections  using the  projection synchronization \nutility service.  bin/console projection:synchronize", 
            "title": "SynchronizeProjectionsCommand"
        }, 
        {
            "location": "/infrastructure/symfony-console/#context-factory", 
            "text": "A context factory is bound to  MsgPhp\\Domain\\Infra\\Console\\Context\\ContextFactoryInterface . Its purpose is to leverage\na CLI command in an effort to interactively built an arbitrary array value (the context).", 
            "title": "Context Factory"
        }, 
        {
            "location": "/infrastructure/symfony-console/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/infrastructure/symfony-console/#configureinputdefinition-definition-void", 
            "text": "Configures a command input definition. See also  InputDefinition . Should be called before using getContext() .", 
            "title": "configure(InputDefinition $definition): void"
        }, 
        {
            "location": "/infrastructure/symfony-console/#getcontextinputinterface-input-styleinterface-io-array-values-array", 
            "text": "Resolves the actual context from the console IO. See also  InputInterface  and  StyleInterface .\nAny element value provided by  $values  takes precedence and should be used as-is.", 
            "title": "getContext(InputInterface $input, StyleInterface $io, array $values = []): array"
        }, 
        {
            "location": "/infrastructure/symfony-console/#implementations", 
            "text": "", 
            "title": "Implementations"
        }, 
        {
            "location": "/infrastructure/symfony-console/#msgphpdomaininfraconsolecontextclasscontextfactory", 
            "text": "Factorizes a context based on any class method signature. It configures the CLI signature by mapping required class\nmethod arguments to command arguments, whereas optional ones are mapped to command options.  bin/console  command  --optional-argument  [ -- ]  required-argument  In both cases a value is optional, if the actual class method argument is required and no value is given it will be\nasked interactively. If interaction is not possible an exception will be thrown instead.   __construct(string $class, string $method, array $classMapping = [], int $flags = 0, ClassContextElementFactoryInterface $elementFactory = null)  $class / $method : The class method to resolve  $classMapping : Global class mapping. Usually used to map abstracts to concretes.  $flags : A bit mask value to toggle various flags  ClassContextBuilder::ALWAYS_OPTIONAL : Always map class method arguments to command options  ClassContextBuilder::NO_DEFAULTS : Leave out default values when calling  getContext()  ClassContextBuilder::REUSE_DEFINITION : Reuse the original input definition for matching class method\n   arguments    $elementFactory : A custom element factory to use. See also  Customizing context elements .", 
            "title": "MsgPhp\\Domain\\Infra\\Console\\Context\\ClassContextFactory"
        }, 
        {
            "location": "/infrastructure/symfony-console/#customizing-context-elements", 
            "text": "Per-element configuration can be provided by implementing a  MsgPhp\\Domain\\Infra\\Console\\Context\\ClassContextElementFactoryInterface .   getElement(string $class, string $method, string $argument): ContextElement  Get a custom  ContextElement  to apply to a specific class/method/argument pair     A default implementation is provided by  MsgPhp\\Domain\\Infra\\Console\\Context\\ClassContextElementFactory  which simply\ntransforms argument names to human readable values so that  $argumentName  becomes  Argument Name .", 
            "title": "Customizing context elements"
        }, 
        {
            "location": "/infrastructure/symfony-console/#basic-example", 
            "text": "?php  use   MsgPhp\\Domain\\Infra\\Console\\Context\\ClassContextFactory ;  use   Symfony\\Component\\Console\\Command\\Command ;  use   Symfony\\Component\\Console\\Input\\InputInterface ;  use   Symfony\\Component\\Console\\Output\\OutputInterface ;  use   Symfony\\Component\\Console\\Style\\SymfonyStyle ;  // --- SETUP ---  class   MyObject  { \n     public   function   __construct ( string   $argument ,   $option   =   null ) \n     { \n     }  }  class   MyCommand   extends   Command  { \n     private   $contextFactory ; \n\n     public   function   __construct () \n     { \n         $this - contextFactory   =   new   ClassContextFactory ( MyObject :: class ,   __construct ); \n\n         parent :: __construct (); \n     } \n\n     protected   function   configure () :   void \n     { \n        $this - setName ( my-command ); \n        $this - contextFactory - configure ( $this - getDefinition ()); \n     } \n\n     protected   function   execute ( InputInterface   $input , OutputInterface   $output ) :   int \n     { \n         $io   =   new   SymfonyStyle ( $input ,   $output ); \n         $context   =   $this - contextFactory - getContext ( $input ,   $io ); \n         $object   =   new   MyObject ( ... array_values ( $context )); \n\n         // do something \n\n         return   0 ; \n     }  }  // --- USAGE ---  // $ bin/console my-command [--option=OPTION] [--] [ argument ]", 
            "title": "Basic example"
        }, 
        {
            "location": "/infrastructure/symfony-console/#msgphpdomaininfraconsolecontextdoctrineentitycontextfactory", 
            "text": "A  Doctrine  entity aware context factory. It decorates any context factory. Its purpose is to\nprovide a discriminator value into the resulting context when working with  inheritance .   __construct(ContextFactoryInterface $factory, EntityManagerInterface $em, string $class)  $factory : The decorated context factory  $em : The entity manager to use  $class : The entity class to use", 
            "title": "MsgPhp\\Domain\\Infra\\Console\\Context\\DoctrineEntityContextFactory"
        }, 
        {
            "location": "/infrastructure/symfony-messenger/", 
            "text": "Symfony Messenger\n\n\nAn overview of available infrastructural code when using \nSymfony Messenger\n.\n\n\n\n\nRequires \nsymfony/messenger\n\n\n\n\nDomain Message Bus\n\n\nA Symfony Messenger tailored \ndomain message bus\n is provided by \nMsgPhp\\Domain\\Infra\\Messenger\\DomainMessageBus\n.\nIt decorates any \nSymfony\\Component\\Messenger\\MessageBusInterface\n type.\n\n\n\n\n__construct(MessageBusInterface $bus)\n\n\n$bus\n: The decorated bus\n\n\n\n\n\n\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\Infra\\Messenger\\DomainMessageBus\n;\n\n\nuse\n \nSymfony\\Component\\Messenger\\MessageBusInterface\n;\n\n\n\n// --- SETUP ---\n\n\n\n/** @var MessageBusInterface $bus */\n\n\n$bus\n \n=\n \n...\n;\n\n\n$domainBus\n \n=\n \nnew\n \nDomainMessageBus\n(\n$bus\n);\n\n\n\n// --- USAGE ---\n\n\n\n$result\n \n=\n \n$domainBus\n-\ndispatch\n(\nnew\n \nSomeMessage\n());", 
            "title": "Symfony Messenger"
        }, 
        {
            "location": "/infrastructure/symfony-messenger/#symfony-messenger", 
            "text": "An overview of available infrastructural code when using  Symfony Messenger .   Requires  symfony/messenger", 
            "title": "Symfony Messenger"
        }, 
        {
            "location": "/infrastructure/symfony-messenger/#domain-message-bus", 
            "text": "A Symfony Messenger tailored  domain message bus  is provided by  MsgPhp\\Domain\\Infra\\Messenger\\DomainMessageBus .\nIt decorates any  Symfony\\Component\\Messenger\\MessageBusInterface  type.   __construct(MessageBusInterface $bus)  $bus : The decorated bus", 
            "title": "Domain Message Bus"
        }, 
        {
            "location": "/infrastructure/symfony-messenger/#basic-example", 
            "text": "?php  use   MsgPhp\\Domain\\Infra\\Messenger\\DomainMessageBus ;  use   Symfony\\Component\\Messenger\\MessageBusInterface ;  // --- SETUP ---  /** @var MessageBusInterface $bus */  $bus   =   ... ;  $domainBus   =   new   DomainMessageBus ( $bus );  // --- USAGE ---  $result   =   $domainBus - dispatch ( new   SomeMessage ());", 
            "title": "Basic example"
        }, 
        {
            "location": "/infrastructure/uuid/", 
            "text": "Universally Unique Identifier\n\n\nAn overview of available infrastructural code when working with \nUUIDs\n.\n\n\n\n\nRequires \nramsey/uuid\n\n\n\n\nDomain Identifier\n\n\nA UUID tailored \ndomain identifier\n is provided by \nMsgPhp\\Domain\\Infra\\Uuid\\DomainId\n. It\nleverages type \nRamsey\\Uuid\\UuidInterface\n as underlying data type.\n\n\n\n\n__construct(UuidInterface $uuid = null)\n\n\n$uuid\n: The underlying UUID. In case of \nnull\n a UUID version 4 value is generated upfront. Meaning the\n  identifier will never be considered empty.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nSee the \nreference\n page for all available UUID identifiers provided per domain\n\n\n\n\nBasic example\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\Domain\\Infra\\Uuid\\DomainId\n;\n\n\nuse\n \nRamsey\\Uuid\\Uuid\n;\n\n\n\n// --- SETUP ---\n\n\n\n$id\n \n=\n \nnew\n \nDomainId\n();\n \n// a new UUID version 4 value\n\n\n$id\n \n=\n \nnew\n \nDomainId\n(\nUuid\n::\nuuid1\n());\n \n// UUID version 1 value\n\n\n$id\n \n=\n \nnew\n \nDomainId\n(\nUuid\n::\nfromString\n(\n00000000-0000-0000-0000-000000000000\n));\n \n// Nil UUID value\n\n\n\n// static\n\n\n\n$id\n \n=\n \nDomainId\n::\nfromValue\n(\n00000000-0000-0000-0000-000000000000\n);", 
            "title": "UUID"
        }, 
        {
            "location": "/infrastructure/uuid/#universally-unique-identifier", 
            "text": "An overview of available infrastructural code when working with  UUIDs .   Requires  ramsey/uuid", 
            "title": "Universally Unique Identifier"
        }, 
        {
            "location": "/infrastructure/uuid/#domain-identifier", 
            "text": "A UUID tailored  domain identifier  is provided by  MsgPhp\\Domain\\Infra\\Uuid\\DomainId . It\nleverages type  Ramsey\\Uuid\\UuidInterface  as underlying data type.   __construct(UuidInterface $uuid = null)  $uuid : The underlying UUID. In case of  null  a UUID version 4 value is generated upfront. Meaning the\n  identifier will never be considered empty.      Note  See the  reference  page for all available UUID identifiers provided per domain", 
            "title": "Domain Identifier"
        }, 
        {
            "location": "/infrastructure/uuid/#basic-example", 
            "text": "?php  use   MsgPhp\\Domain\\Infra\\Uuid\\DomainId ;  use   Ramsey\\Uuid\\Uuid ;  // --- SETUP ---  $id   =   new   DomainId ();   // a new UUID version 4 value  $id   =   new   DomainId ( Uuid :: uuid1 ());   // UUID version 1 value  $id   =   new   DomainId ( Uuid :: fromString ( 00000000-0000-0000-0000-000000000000 ));   // Nil UUID value  // static  $id   =   DomainId :: fromValue ( 00000000-0000-0000-0000-000000000000 );", 
            "title": "Basic example"
        }, 
        {
            "location": "/cookbook/bundle-installation/", 
            "text": "Bundle Installation\n\n\nThe project bundles are tailored to the \nSymfony Framework\n and designed to be used standalone. Its main purpose is to\nenable a specific domain layer within an application.\n\n\nAvailable Bundles\n\n\n\n\n\n\n\nmsgphp/eav-bundle\n: Basic entity-attribute-value management (the \nEAV\n domain)\n\n\nmsgphp/user-bundle\n: Basic user management (the \nUser\n domain)\n\n\n\n\n\nInstallation\n\n\ncomposer require msgphp/\nname\n-bundle\n\n\n\n\n\n\n\nInfo\n\n\nWhen \nSymfony Flex\n is used to mange your Symfony application the minimal bundle configuration is created for you\nautomatically based on \nMsgPHP recipes\n\n\n\n\nConfiguration\n\n\nA bundle provides the following configuration nodes by default:\n\n\nclass_mapping\n\n\nConfigures the bundle with a class mapping to tell which classes of yours should be used for a known class of ours.\n\n\nmsgphp_\nname\n:\n\n    \nclass_mapping\n:\n\n        \nMsgPhp\\SomeClass\n:\n \nApp\\SomeClass\n\n\n\n\n\n\nThe class mapping applies when working with an \nobject factory\n.\n\n\nDepending on the bundle a specific class mapping entry might enable one of the bundle its features which is otherwise\ndisabled by default.\n\n\nid_type_mapping\n\n\nConfigures the bundle \ndomain identifier\n types. Each key must be a sub class of\n\nMsgPhp\\Domain\\DomainIdInterface\n whereas each value must be a known type name.\n\n\nIt ensures a default class mapping entry is added which maps the identifier to a \nconcrete implementation\n.\n\n\nmsgphp_\nname\n:\n\n    \nid_type_mapping\n:\n\n        \nMsgPhp\\SomeDomain\\SomeIdInterface\n:\n \nsome_type_name\n\n\n\n\n\n\n\n\nNote\n\n\nSee the \nreference\n page for all available identifiers provided per domain\n\n\n\n\nBy convention any \nDoctrine DBAL type\n can be used for a type name. Additionally the following UUID types are detected\nas well:\n\n\n\n\nuuid\n\n\nuuid_binary\n\n\nuuid_binary_ordered_time\n\n\n\n\ndefault_id_type\n\n\nConfigures a default type name to use for all known domain identifiers provided by the bundle. See also \nid_type_mapping\n.\n\n\nmsgphp_\nname\n:\n\n    \ndefault_id_type\n:\n \ninteger\n\n\n\n\n\n\ncommands\n\n\nBy default a command handler provided by the bundle might be enabled or disabled depending on an \nentity feature\n\nis being used yes or no.\n\n\nHowever, in case of a \nevent-sourcing command handler\n\nthe corresponding \ndomain event\n might be supported regardless. Depending on your own\n\nevent handler\n implementation. To keep leveraging default command handlers they\ncan be explicitly enabled or disabled by command.\n\n\nmsgphp_\nname\n:\n\n    \ncommands\n:\n\n        \nMsgPhp\\SomeDomain\\Command\\SomeCommand\n:\n \ntrue\n\n        \nMsgPhp\\SomeDomain\\Command\\SomeOtherCommand\n:\n \nfalse\n\n\n\n\n\n\nBasic Configuration Example\n\n\nGiven a bundle provides the following domain identifiers:\n\n\n\n\nMsgPhp\\SomeDomain\\FooIdInterface\n\n\nMsgPhp\\SomeDomain\\BarIdInterface\n\n\nMsgPhp\\SomeDomain\\BazIdInterface\n\n\n\n\nmsgphp_\nname\n:\n\n    \ndefault_id_type\n:\n \nuuid\n\n    \nid_type_mapping\n:\n\n        \nMsgPhp\\SomeDomain\\FooIdInterface\n:\n \ninteger\n\n        \n# implied:\n\n        \n# MsgPhp\\SomeDomain\\BarIdInterface: uuid\n\n        \n# MsgPhp\\SomeDomain\\BazIdInterface: uuid\n\n    \nclass_mapping\n:\n\n        \nMsgPhp\\SomeDomain\\BarIdInterface\n:\n \nApp\\MyBarUuid\n\n        \n# implied:\n\n        \n# MsgPhp\\SomeDomain\\FooIdInterface: MsgPhp\\SomeDomain\\FooId\n\n        \n# MsgPhp\\SomeDomain\\BazIdInterface: MsgPhp\\SomeDomain\\Infra\\Uuid\\BazId\n\n\n\n\n\n\n\n\nInfo\n\n\nSee also the \ndemo application configuration", 
            "title": "Bundle Installation"
        }, 
        {
            "location": "/cookbook/bundle-installation/#bundle-installation", 
            "text": "The project bundles are tailored to the  Symfony Framework  and designed to be used standalone. Its main purpose is to\nenable a specific domain layer within an application.", 
            "title": "Bundle Installation"
        }, 
        {
            "location": "/cookbook/bundle-installation/#available-bundles", 
            "text": "msgphp/eav-bundle : Basic entity-attribute-value management (the  EAV  domain)  msgphp/user-bundle : Basic user management (the  User  domain)", 
            "title": "Available Bundles"
        }, 
        {
            "location": "/cookbook/bundle-installation/#installation", 
            "text": "composer require msgphp/ name -bundle   Info  When  Symfony Flex  is used to mange your Symfony application the minimal bundle configuration is created for you\nautomatically based on  MsgPHP recipes", 
            "title": "Installation"
        }, 
        {
            "location": "/cookbook/bundle-installation/#configuration", 
            "text": "A bundle provides the following configuration nodes by default:", 
            "title": "Configuration"
        }, 
        {
            "location": "/cookbook/bundle-installation/#class_mapping", 
            "text": "Configures the bundle with a class mapping to tell which classes of yours should be used for a known class of ours.  msgphp_ name : \n     class_mapping : \n         MsgPhp\\SomeClass :   App\\SomeClass   The class mapping applies when working with an  object factory .  Depending on the bundle a specific class mapping entry might enable one of the bundle its features which is otherwise\ndisabled by default.", 
            "title": "class_mapping"
        }, 
        {
            "location": "/cookbook/bundle-installation/#id_type_mapping", 
            "text": "Configures the bundle  domain identifier  types. Each key must be a sub class of MsgPhp\\Domain\\DomainIdInterface  whereas each value must be a known type name.  It ensures a default class mapping entry is added which maps the identifier to a  concrete implementation .  msgphp_ name : \n     id_type_mapping : \n         MsgPhp\\SomeDomain\\SomeIdInterface :   some_type_name    Note  See the  reference  page for all available identifiers provided per domain   By convention any  Doctrine DBAL type  can be used for a type name. Additionally the following UUID types are detected\nas well:   uuid  uuid_binary  uuid_binary_ordered_time", 
            "title": "id_type_mapping"
        }, 
        {
            "location": "/cookbook/bundle-installation/#default_id_type", 
            "text": "Configures a default type name to use for all known domain identifiers provided by the bundle. See also  id_type_mapping .  msgphp_ name : \n     default_id_type :   integer", 
            "title": "default_id_type"
        }, 
        {
            "location": "/cookbook/bundle-installation/#commands", 
            "text": "By default a command handler provided by the bundle might be enabled or disabled depending on an  entity feature \nis being used yes or no.  However, in case of a  event-sourcing command handler \nthe corresponding  domain event  might be supported regardless. Depending on your own event handler  implementation. To keep leveraging default command handlers they\ncan be explicitly enabled or disabled by command.  msgphp_ name : \n     commands : \n         MsgPhp\\SomeDomain\\Command\\SomeCommand :   true \n         MsgPhp\\SomeDomain\\Command\\SomeOtherCommand :   false", 
            "title": "commands"
        }, 
        {
            "location": "/cookbook/bundle-installation/#basic-configuration-example", 
            "text": "Given a bundle provides the following domain identifiers:   MsgPhp\\SomeDomain\\FooIdInterface  MsgPhp\\SomeDomain\\BarIdInterface  MsgPhp\\SomeDomain\\BazIdInterface   msgphp_ name : \n     default_id_type :   uuid \n     id_type_mapping : \n         MsgPhp\\SomeDomain\\FooIdInterface :   integer \n         # implied: \n         # MsgPhp\\SomeDomain\\BarIdInterface: uuid \n         # MsgPhp\\SomeDomain\\BazIdInterface: uuid \n     class_mapping : \n         MsgPhp\\SomeDomain\\BarIdInterface :   App\\MyBarUuid \n         # implied: \n         # MsgPhp\\SomeDomain\\FooIdInterface: MsgPhp\\SomeDomain\\FooId \n         # MsgPhp\\SomeDomain\\BazIdInterface: MsgPhp\\SomeDomain\\Infra\\Uuid\\BazId    Info  See also the  demo application configuration", 
            "title": "Basic Configuration Example"
        }, 
        {
            "location": "/cookbook/configuring-doctrine-orm/", 
            "text": "Configuring Doctrine ORM\n\n\nAfter a \nbundle\n is installed we can configure \nDoctrine ORM\n.\n\n\nInstallation\n\n\ncomposer install doctrine/orm doctrine/doctrine-bundle\n\n\n# with Symfony Flex\n\ncomposer install orm\n\n\n\n\n\nConfiguration\n\n\nSee the Doctrine Bundle \nrecipe configuration\n for the minimal configuration to put in \nconfig/packages/doctrine.yaml\n.\n\n\nAlthough the examples use annotation based mappings, you are not required to do so. \nRead more\n.\n\n\n\n\nInfo\n\n\nThe configuration is automatically added with Symfony Flex\n\n\n\n\nBy default MsgPHP uses the \ndoctrine.orm.entity_manager\n service. You can override its alias service to use any other\nentity manager:\n\n\n# config/services.yaml\n\n\n\nservices\n:\n\n    \n# ...\n\n\n    \nmsgphp.doctrine.entity_manager\n:\n \n@doctrine.orm.some_other_entity_manager\n\n\n\n\n\n\nMapping Entities\n\n\nA MsgPHP bundle provides base entity models in the form of \nmapped superclasses\n. An actual entity object must be\ndefined by your application:\n\n\n?php\n\n\n\nnamespace\n \nApp\\Entity\n;\n\n\n\nuse\n \nDoctrine\\ORM\\Mapping\n \nas\n \nORM\n;\n\n\nuse\n \nMsgPhp\\SomeDomain\\Entity\\SomeEntity\n \nas\n \nBaseSomeEntity\n;\n\n\n\n/**\n\n\n * @ORM\\Entity()\n\n\n */\n\n\nclass\n \nSomeEntity\n \nextends\n \nBaseSomeEntity\n\n\n{\n\n    \n// ...\n\n\n}\n\n\n\n\n\n\nLet MsgPHP know about your entity:\n\n\nmsgphp_\nname\n:\n\n    \n# ...\n\n\n    \nclass_mapping\n:\n\n        \nMsgPhp\\SomeDomain\\Entity\\SomeEntity\n:\n \nApp\\Entity\\SomeEntity\n\n\n\n\n\n\n\n\nNote\n\n\nSee the \nreference\n page for all available entities provided per domain. When using a\nentity field / feature trait its default ORM mapping is configured automatically.\n\n\n\n\n\n\nInfo\n\n\nWith Symfony Flex the required entities of a MsgPHP bundle are automatically created, including ORM mapping\nand configuration\n\n\n\n\nMapping Identifiers\n\n\nWhen an entity object is identified using a \ndomain identifier\n we must configure it accordingly:\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\SomeDomain\\SomeIdInterface\n;\n\n\n\n// ...\n\n\n\nclass\n \nSomeEntity\n \nextends\n \nBaseSomeEntity\n\n\n{\n\n    \n/**\n\n\n     * @var SomeIdInterface|null\n\n\n     * @ORM\\Id()\n\n\n     * @ORM\\GeneratedValue()\n\n\n     * @ORM\\Column(type=\nmsghp_some_id\n)\n\n\n     */\n\n    \npublic\n \n$id\n;\n\n\n}\n\n\n\n\n\n\n\n\nNote\n\n\nSee the \nreference\n page for all available identifier types provided per\ndomain\n\n\n\n\n\n\nNote\n\n\nWhen using an identifier that is able to calculate a value upfront (e.g. UUIDs) the \n@ORM\\GeneratedValue()\n is not\nnecessary\n\n\n\n\n\n\nInfo\n\n\nRead more\n about the Doctrine domain identifier type\n\n\n\n\nCustom Identifiers\n\n\nIn case a custom implementation is used it should be configured accordingly:\n\n\nmsgphp_\nname\n:\n\n    \n# ...\n\n\n    \nclass_mapping\n:\n\n        \nMsgPhp\\SomeDomain\\SomeIdInterface\n:\n \nApp\\SomeId\n\n    \nid_type_mapping\n:\n\n        \nMsgPhp\\SomeDomain\\SomeIdInterface\n:\n \nbigint\n\n\n\n\n\n\nWithout Nullability\n\n\n?php\n\n\n\n// ...\n\n\n\nclass\n \nSomeEntity\n \nextends\n \nBaseSomeEntity\n\n\n{\n\n    \n/**\n\n\n     * @ORM\\...\n\n\n     */\n\n    \nprivate\n \n$id\n;\n\n\n    \npublic\n \nfunction\n \n__construct\n(\nSomeIdInterface\n \n$id\n)\n\n    \n{\n\n        \n$this\n-\nid\n \n=\n \n$id\n;\n\n    \n}\n\n\n    \npublic\n \nfunction\n \ngetId\n()\n:\n \nSomeIdInterface\n\n    \n{\n\n        \nreturn\n \n$this\n-\nid\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\nOr coupled with a known identifier class:\n\n\n?php\n\n\n\nuse\n \nMsgPhp\\SomeDomain\\SomeId\n;\n\n\n\n// ...\n\n\n\nclass\n \nSomeEntity\n \nextends\n \nBaseSomeEntity\n\n\n{\n\n    \n// ...\n\n\n    \npublic\n \nfunction\n \n__construct\n()\n\n    \n{\n\n        \n$this\n-\nid\n \n=\n \nnew\n \nSomeId\n();\n\n    \n}\n\n\n    \n// ...\n\n\n}\n\n\n\n\n\n\nWithout Automatic Hydration\n\n\nTo hydrate the primitive identifier value instead of a value object, the type can be configured regularly. It requires\nto couple with a known identifier class.\n\n\n?php\n\n\n\n// ...\n\n\n\nclass\n \nSomeEntity\n \nextends\n \nBaseSomeEntity\n\n\n{\n\n    \n/**\n\n\n     * @var int|null\n\n\n     * @ORM\\Id()\n\n\n     * @ORM\\GeneratedValue()\n\n\n     * @ORM\\Column(type=\ninteger\n)\n\n\n     */\n\n    \nprivate\n \n$id\n;\n\n\n    \npublic\n \nfunction\n \n__construct\n(\nSomeIdInterface\n \n$id\n)\n\n    \n{\n\n        \n$this\n-\nid\n \n=\n \n$id\n-\nisEmpty\n()\n \n?\n \nnull\n \n:\n \n(\nint\n)\n \n$id\n-\ntoString\n();\n\n    \n}\n\n\n    \npublic\n \nfunction\n \ngetId\n()\n:\n \nSomeIdInterface\n\n    \n{\n\n        \nreturn\n \nSomeId\n::\nfromValue\n(\n$this\n-\nid\n);\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nInfo\n\n\nRead more\n about Doctrine identifier hydration\n\n\n\n\nDatabase Setup\n\n\nConfigure the database URL:\n\n\n# .env\n\n\n\n# sqlite\n\n\nDATABASE_URL\n=\nsqlite:///%kernel.project_dir%/var/db.sqlite\n\n\n# mysql / mariadb\n\n\nDATABASE_URL\n=\nmysql://user:pass@host:3306/db_name?charset=utf8mb4\nserverVersion=5.7\n\n\n\n\n\n\nCreate the database schema:\n\n\nbin/console doctrine:database:create\nbin/console doctrine:schema:update --force", 
            "title": "Configuring Doctrine ORM"
        }, 
        {
            "location": "/cookbook/configuring-doctrine-orm/#configuring-doctrine-orm", 
            "text": "After a  bundle  is installed we can configure  Doctrine ORM .", 
            "title": "Configuring Doctrine ORM"
        }, 
        {
            "location": "/cookbook/configuring-doctrine-orm/#installation", 
            "text": "composer install doctrine/orm doctrine/doctrine-bundle # with Symfony Flex \ncomposer install orm", 
            "title": "Installation"
        }, 
        {
            "location": "/cookbook/configuring-doctrine-orm/#configuration", 
            "text": "See the Doctrine Bundle  recipe configuration  for the minimal configuration to put in  config/packages/doctrine.yaml .  Although the examples use annotation based mappings, you are not required to do so.  Read more .   Info  The configuration is automatically added with Symfony Flex   By default MsgPHP uses the  doctrine.orm.entity_manager  service. You can override its alias service to use any other\nentity manager:  # config/services.yaml  services : \n     # ... \n\n     msgphp.doctrine.entity_manager :   @doctrine.orm.some_other_entity_manager", 
            "title": "Configuration"
        }, 
        {
            "location": "/cookbook/configuring-doctrine-orm/#mapping-entities", 
            "text": "A MsgPHP bundle provides base entity models in the form of  mapped superclasses . An actual entity object must be\ndefined by your application:  ?php  namespace   App\\Entity ;  use   Doctrine\\ORM\\Mapping   as   ORM ;  use   MsgPhp\\SomeDomain\\Entity\\SomeEntity   as   BaseSomeEntity ;  /**   * @ORM\\Entity()   */  class   SomeEntity   extends   BaseSomeEntity  { \n     // ...  }   Let MsgPHP know about your entity:  msgphp_ name : \n     # ... \n\n     class_mapping : \n         MsgPhp\\SomeDomain\\Entity\\SomeEntity :   App\\Entity\\SomeEntity    Note  See the  reference  page for all available entities provided per domain. When using a\nentity field / feature trait its default ORM mapping is configured automatically.    Info  With Symfony Flex the required entities of a MsgPHP bundle are automatically created, including ORM mapping\nand configuration", 
            "title": "Mapping Entities"
        }, 
        {
            "location": "/cookbook/configuring-doctrine-orm/#mapping-identifiers", 
            "text": "When an entity object is identified using a  domain identifier  we must configure it accordingly:  ?php  use   MsgPhp\\SomeDomain\\SomeIdInterface ;  // ...  class   SomeEntity   extends   BaseSomeEntity  { \n     /**       * @var SomeIdInterface|null       * @ORM\\Id()       * @ORM\\GeneratedValue()       * @ORM\\Column(type= msghp_some_id )       */ \n     public   $id ;  }    Note  See the  reference  page for all available identifier types provided per\ndomain    Note  When using an identifier that is able to calculate a value upfront (e.g. UUIDs) the  @ORM\\GeneratedValue()  is not\nnecessary    Info  Read more  about the Doctrine domain identifier type", 
            "title": "Mapping Identifiers"
        }, 
        {
            "location": "/cookbook/configuring-doctrine-orm/#custom-identifiers", 
            "text": "In case a custom implementation is used it should be configured accordingly:  msgphp_ name : \n     # ... \n\n     class_mapping : \n         MsgPhp\\SomeDomain\\SomeIdInterface :   App\\SomeId \n     id_type_mapping : \n         MsgPhp\\SomeDomain\\SomeIdInterface :   bigint", 
            "title": "Custom Identifiers"
        }, 
        {
            "location": "/cookbook/configuring-doctrine-orm/#without-nullability", 
            "text": "?php  // ...  class   SomeEntity   extends   BaseSomeEntity  { \n     /**       * @ORM\\...       */ \n     private   $id ; \n\n     public   function   __construct ( SomeIdInterface   $id ) \n     { \n         $this - id   =   $id ; \n     } \n\n     public   function   getId () :   SomeIdInterface \n     { \n         return   $this - id ; \n     }  }   Or coupled with a known identifier class:  ?php  use   MsgPhp\\SomeDomain\\SomeId ;  // ...  class   SomeEntity   extends   BaseSomeEntity  { \n     // ... \n\n     public   function   __construct () \n     { \n         $this - id   =   new   SomeId (); \n     } \n\n     // ...  }", 
            "title": "Without Nullability"
        }, 
        {
            "location": "/cookbook/configuring-doctrine-orm/#without-automatic-hydration", 
            "text": "To hydrate the primitive identifier value instead of a value object, the type can be configured regularly. It requires\nto couple with a known identifier class.  ?php  // ...  class   SomeEntity   extends   BaseSomeEntity  { \n     /**       * @var int|null       * @ORM\\Id()       * @ORM\\GeneratedValue()       * @ORM\\Column(type= integer )       */ \n     private   $id ; \n\n     public   function   __construct ( SomeIdInterface   $id ) \n     { \n         $this - id   =   $id - isEmpty ()   ?   null   :   ( int )   $id - toString (); \n     } \n\n     public   function   getId () :   SomeIdInterface \n     { \n         return   SomeId :: fromValue ( $this - id ); \n     }  }    Info  Read more  about Doctrine identifier hydration", 
            "title": "Without Automatic Hydration"
        }, 
        {
            "location": "/cookbook/configuring-doctrine-orm/#database-setup", 
            "text": "Configure the database URL:  # .env  # sqlite  DATABASE_URL = sqlite:///%kernel.project_dir%/var/db.sqlite # mysql / mariadb  DATABASE_URL = mysql://user:pass@host:3306/db_name?charset=utf8mb4 serverVersion=5.7   Create the database schema:  bin/console doctrine:database:create\nbin/console doctrine:schema:update --force", 
            "title": "Database Setup"
        }, 
        {
            "location": "/cookbook/configuring-a-message-bus/", 
            "text": "Configuring A Message Bus\n\n\nTo be able to dispatch the default \nmessages\n a \nmessage bus\n\nmust be configured.\n\n\nUsing \nSymfony Messenger\n\n\nInstallation\n\n\ncomposer install symfony/messenger\n\n\n# with Symfony Flex\n\ncomposer install messenger\n\n\n\n\n\nConfiguration\n\n\nSee the Messenger \nrecipe configuration\n for the minimal configuration to put in \nconfig/packages/messenger.yaml\n.\n\n\n\n\nInfo\n\n\nThe configuration is automatically added with Symfony Flex\n\n\n\n\nConfigure a command- and event bus:\n\n\n# config/packages/messenger.yaml\n\n\n\nframework\n:\n\n    \nmessenger\n:\n\n        \n# ...\n\n\n        \ndefault_bus\n:\n \ncommand_bus\n\n        \nbuses\n:\n\n            \ncommand_bus\n:\n\n                \nmiddleware\n:\n\n                    \n-\n \nmsgphp.messenger.console_message_receiver\n\n            \nevent_bus\n:\n\n                \ndefault_middleware\n:\n \nallow_no_handlers\n\n                \nmiddleware\n:\n\n                    \n-\n \nmsgphp.messenger.console_message_receiver\n\n\n\n\n\n\nBy default MsgPHP uses the bus configured under \nframework.messenger.default_bus\n. You can override its alias services\nto use any other bus:\n\n\n# config/services.yaml\n\n\n\nservices\n:\n\n    \n# ...\n\n\n    \nmsgphp.messenger.command_bus\n:\n \n@command_bus\n\n    \nmsgphp.messenger.event_bus\n:\n \n@event_bus\n\n\n\n\n\n\nUsing \nSimpleBus\n\n\nInstallation\n\n\ncomposer install simple-bus/symfony-bridge\n\n\n\n\n\nConfiguration\n\n\nEnable the bundles:\n\n\n?php\n\n\n\n// config/bundles.php\n\n\n\nreturn\n \n[\n\n    \n// ...\n\n    \nSimpleBus\\SymfonyBridge\\SimpleBusCommandBusBundle\n::\nclass\n \n=\n \n[\nall\n \n=\n \ntrue\n],\n\n    \nSimpleBus\\SymfonyBridge\\SimpleBusEventBusBundle\n::\nclass\n \n=\n \n[\nall\n \n=\n \ntrue\n],\n\n\n];\n\n\n\n\n\n\nBy default MsgPHP uses the \nsimple_bus.command_bus\n and \nsimple_bus.event_bus\n services. You can override its alias \nservices to use any other bus:\n\n\n# config/services.yaml\n\n\n\nservices\n:\n\n    \n# ...\n\n\n    \nmsgphp.simple_bus.command_bus\n:\n \n@simple_bus.command_bus\n\n    \nmsgphp.simple_bus.event_bus\n:\n \n@simple_bus.event_bus\n\n\n\n\n\n\nUsing A Custom Bus\n\n\nTo use a custom \nmessage bus\n implementation you can override its main alias service:\n\n\n# config/services.yaml\n\n\n\nservices\n:\n\n    \n# ...\n\n\n    \nMsgPhp\\Domain\\Message\\DomainMessageBusInterface\n:\n \n@my_bus\n\n\n\n\n\n\n\n\nInfo\n\n\nThe implementation must be capable to dispatch both command- and event messages", 
            "title": "Configuring A Message Bus"
        }, 
        {
            "location": "/cookbook/configuring-a-message-bus/#configuring-a-message-bus", 
            "text": "To be able to dispatch the default  messages  a  message bus \nmust be configured.", 
            "title": "Configuring A Message Bus"
        }, 
        {
            "location": "/cookbook/configuring-a-message-bus/#using-symfony-messenger", 
            "text": "", 
            "title": "Using Symfony Messenger"
        }, 
        {
            "location": "/cookbook/configuring-a-message-bus/#installation", 
            "text": "composer install symfony/messenger # with Symfony Flex \ncomposer install messenger", 
            "title": "Installation"
        }, 
        {
            "location": "/cookbook/configuring-a-message-bus/#configuration", 
            "text": "See the Messenger  recipe configuration  for the minimal configuration to put in  config/packages/messenger.yaml .   Info  The configuration is automatically added with Symfony Flex   Configure a command- and event bus:  # config/packages/messenger.yaml  framework : \n     messenger : \n         # ... \n\n         default_bus :   command_bus \n         buses : \n             command_bus : \n                 middleware : \n                     -   msgphp.messenger.console_message_receiver \n             event_bus : \n                 default_middleware :   allow_no_handlers \n                 middleware : \n                     -   msgphp.messenger.console_message_receiver   By default MsgPHP uses the bus configured under  framework.messenger.default_bus . You can override its alias services\nto use any other bus:  # config/services.yaml  services : \n     # ... \n\n     msgphp.messenger.command_bus :   @command_bus \n     msgphp.messenger.event_bus :   @event_bus", 
            "title": "Configuration"
        }, 
        {
            "location": "/cookbook/configuring-a-message-bus/#using-simplebus", 
            "text": "", 
            "title": "Using SimpleBus"
        }, 
        {
            "location": "/cookbook/configuring-a-message-bus/#installation_1", 
            "text": "composer install simple-bus/symfony-bridge", 
            "title": "Installation"
        }, 
        {
            "location": "/cookbook/configuring-a-message-bus/#configuration_1", 
            "text": "Enable the bundles:  ?php  // config/bundles.php  return   [ \n     // ... \n     SimpleBus\\SymfonyBridge\\SimpleBusCommandBusBundle :: class   =   [ all   =   true ], \n     SimpleBus\\SymfonyBridge\\SimpleBusEventBusBundle :: class   =   [ all   =   true ],  ];   By default MsgPHP uses the  simple_bus.command_bus  and  simple_bus.event_bus  services. You can override its alias \nservices to use any other bus:  # config/services.yaml  services : \n     # ... \n\n     msgphp.simple_bus.command_bus :   @simple_bus.command_bus \n     msgphp.simple_bus.event_bus :   @simple_bus.event_bus", 
            "title": "Configuration"
        }, 
        {
            "location": "/cookbook/configuring-a-message-bus/#using-a-custom-bus", 
            "text": "To use a custom  message bus  implementation you can override its main alias service:  # config/services.yaml  services : \n     # ... \n\n     MsgPhp\\Domain\\Message\\DomainMessageBusInterface :   @my_bus    Info  The implementation must be capable to dispatch both command- and event messages", 
            "title": "Using A Custom Bus"
        }, 
        {
            "location": "/reference/identifiers/", 
            "text": "Identifiers\n\n\nReference of available \nidentifiers\n per domain.\n\n\n\n\n\nmsgphp/domain\n\n\nMsgPhp\\Domain\\DomainIdInterface\n\n\n\n\n\n\n\n\nPrimitive type\n\n\nImplementation\n\n\n\n\n\n\n\n\n\n\nScalar\n\n\nMsgPhp\\Domain\\DomainId\n\n\n\n\n\n\nUUID\n\n\nMsgPhp\\Domain\\Infra\\Uuid\\DomainId\n\n\n\n\n\n\n\n\nmsgphp/eav\n\n\nMsgPhp\\Eav\\AttributeIdInterface\n\n\n\n\n\n\n\n\nPrimitive type\n\n\nImplementation\n\n\n\n\n\n\n\n\n\n\nScalar\n\n\nMsgPhp\\Eav\\AttributeId\n\n\n\n\n\n\nUUID\n\n\nMsgPhp\\Eav\\Infra\\Uuid\\AttributeId\n\n\n\n\n\n\n\n\nMsgPhp\\Eav\\AttributeValueIdInterface\n\n\n\n\n\n\n\n\nPrimitive type\n\n\nImplementation\n\n\n\n\n\n\n\n\n\n\nScalar\n\n\nMsgPhp\\Eav\\AttributeValueId\n\n\n\n\n\n\nUUID\n\n\nMsgPhp\\Eav\\Infra\\Uuid\\AttributeValueId\n\n\n\n\n\n\n\n\nmsgphp/user\n\n\nMsgPhp\\User\\UserIdInterface\n\n\n\n\n\n\n\n\nPrimitive type\n\n\nImplementation\n\n\n\n\n\n\n\n\n\n\nScalar\n\n\nMsgPhp\\User\\UserId\n\n\n\n\n\n\nUUID\n\n\nMsgPhp\\User\\Infra\\Uuid\\UserId", 
            "title": "Identifiers"
        }, 
        {
            "location": "/reference/identifiers/#identifiers", 
            "text": "Reference of available  identifiers  per domain.", 
            "title": "Identifiers"
        }, 
        {
            "location": "/reference/identifiers/#msgphpdomain", 
            "text": "", 
            "title": "msgphp/domain"
        }, 
        {
            "location": "/reference/identifiers/#msgphpdomaindomainidinterface", 
            "text": "Primitive type  Implementation      Scalar  MsgPhp\\Domain\\DomainId    UUID  MsgPhp\\Domain\\Infra\\Uuid\\DomainId", 
            "title": "MsgPhp\\Domain\\DomainIdInterface"
        }, 
        {
            "location": "/reference/identifiers/#msgphpeav", 
            "text": "", 
            "title": "msgphp/eav"
        }, 
        {
            "location": "/reference/identifiers/#msgphpeavattributeidinterface", 
            "text": "Primitive type  Implementation      Scalar  MsgPhp\\Eav\\AttributeId    UUID  MsgPhp\\Eav\\Infra\\Uuid\\AttributeId", 
            "title": "MsgPhp\\Eav\\AttributeIdInterface"
        }, 
        {
            "location": "/reference/identifiers/#msgphpeavattributevalueidinterface", 
            "text": "Primitive type  Implementation      Scalar  MsgPhp\\Eav\\AttributeValueId    UUID  MsgPhp\\Eav\\Infra\\Uuid\\AttributeValueId", 
            "title": "MsgPhp\\Eav\\AttributeValueIdInterface"
        }, 
        {
            "location": "/reference/identifiers/#msgphpuser", 
            "text": "", 
            "title": "msgphp/user"
        }, 
        {
            "location": "/reference/identifiers/#msgphpuseruseridinterface", 
            "text": "Primitive type  Implementation      Scalar  MsgPhp\\User\\UserId    UUID  MsgPhp\\User\\Infra\\Uuid\\UserId", 
            "title": "MsgPhp\\User\\UserIdInterface"
        }, 
        {
            "location": "/reference/entities/", 
            "text": "Entities\n\n\nReference of available \nentities\n per domain.\n\n\n\n\n\nmsgphp/domain\n\n\nFields\n\n\n\n\nMsgPhp\\Domain\\Entity\\Fields\\CreatedAtField\n\n\nMsgPhp\\Domain\\Entity\\Fields\\EnabledField\n\n\nMsgPhp\\Domain\\Entity\\Fields\\LastUpdatedAtField\n\n\n\n\nFeatures\n\n\n\n\nMsgPhp\\Domain\\Entity\\Features\\CanBeConfirmed\n\n\nMsgPhp\\Domain\\Entity\\Features\\CanBeEnabled\n\n\n\n\nmsgphp/eav\n\n\nEntities\n\n\n\n\nMsgPhp\\Eav\\Entity\\Attribute\n\n\nMsgPhp\\Eav\\Entity\\AttributeValue\n\n\n\n\nFields\n\n\n\n\nMsgPhp\\Eav\\Entity\\Fields\\AttributesField\n\n\n\n\nFeatures\n\n\n\n\nMsgPhp\\Eav\\Entity\\Features\\EntityAttributeValue\n\n\n\n\nmsgphp/user\n\n\nEntities\n\n\n\n\nMsgPhp\\User\\Entity\\Role\n\n\nMsgPhp\\User\\Entity\\User\n\n\nMsgPhp\\User\\Entity\\UserEmail\n\n\nMsgPhp\\User\\Entity\\UserRole\n\n\nMsgPhp\\User\\Entity\\Username\n\n\n\n\nFields\n\n\n\n\nMsgPhp\\User\\Entity\\Fields\\EmailsField\n\n\nMsgPhp\\User\\Entity\\Fields\\RoleField\n\n\nMsgPhp\\User\\Entity\\Fields\\RolesField\n\n\nMsgPhp\\User\\Entity\\Fields\\UserField\n\n\n\n\nFeatures\n\n\n\n\nMsgPhp\\User\\Entity\\Features\\EmailCredential\n\n\nMsgPhp\\User\\Entity\\Features\\EmailPasswordCredential\n\n\nMsgPhp\\User\\Entity\\Features\\EmailSaltedPasswordCredential\n\n\nMsgPhp\\User\\Entity\\Features\\NicknameCredential\n\n\nMsgPhp\\User\\Entity\\Features\\NicknamePasswordCredential\n\n\nMsgPhp\\User\\Entity\\Features\\NicknameSaltedPasswordCredential\n\n\nMsgPhp\\User\\Entity\\Features\\ResettablePassword\n\n\nMsgPhp\\User\\Entity\\Features\\TokenCredential\n\n\n\n\nmsgphp/user-eav\n\n\nEntities\n\n\n\n\nMsgPhp\\User\\Entity\\UserAttributeValue\n\n\n\n\nFields\n\n\n\n\nMsgPhp\\User\\Entity\\Fields\\AttributeValuesField\n\n\n\n\nFeatures\n\n\n\n\nNo features available", 
            "title": "Entities"
        }, 
        {
            "location": "/reference/entities/#entities", 
            "text": "Reference of available  entities  per domain.", 
            "title": "Entities"
        }, 
        {
            "location": "/reference/entities/#msgphpdomain", 
            "text": "", 
            "title": "msgphp/domain"
        }, 
        {
            "location": "/reference/entities/#fields", 
            "text": "MsgPhp\\Domain\\Entity\\Fields\\CreatedAtField  MsgPhp\\Domain\\Entity\\Fields\\EnabledField  MsgPhp\\Domain\\Entity\\Fields\\LastUpdatedAtField", 
            "title": "Fields"
        }, 
        {
            "location": "/reference/entities/#features", 
            "text": "MsgPhp\\Domain\\Entity\\Features\\CanBeConfirmed  MsgPhp\\Domain\\Entity\\Features\\CanBeEnabled", 
            "title": "Features"
        }, 
        {
            "location": "/reference/entities/#msgphpeav", 
            "text": "", 
            "title": "msgphp/eav"
        }, 
        {
            "location": "/reference/entities/#entities_1", 
            "text": "MsgPhp\\Eav\\Entity\\Attribute  MsgPhp\\Eav\\Entity\\AttributeValue", 
            "title": "Entities"
        }, 
        {
            "location": "/reference/entities/#fields_1", 
            "text": "MsgPhp\\Eav\\Entity\\Fields\\AttributesField", 
            "title": "Fields"
        }, 
        {
            "location": "/reference/entities/#features_1", 
            "text": "MsgPhp\\Eav\\Entity\\Features\\EntityAttributeValue", 
            "title": "Features"
        }, 
        {
            "location": "/reference/entities/#msgphpuser", 
            "text": "", 
            "title": "msgphp/user"
        }, 
        {
            "location": "/reference/entities/#entities_2", 
            "text": "MsgPhp\\User\\Entity\\Role  MsgPhp\\User\\Entity\\User  MsgPhp\\User\\Entity\\UserEmail  MsgPhp\\User\\Entity\\UserRole  MsgPhp\\User\\Entity\\Username", 
            "title": "Entities"
        }, 
        {
            "location": "/reference/entities/#fields_2", 
            "text": "MsgPhp\\User\\Entity\\Fields\\EmailsField  MsgPhp\\User\\Entity\\Fields\\RoleField  MsgPhp\\User\\Entity\\Fields\\RolesField  MsgPhp\\User\\Entity\\Fields\\UserField", 
            "title": "Fields"
        }, 
        {
            "location": "/reference/entities/#features_2", 
            "text": "MsgPhp\\User\\Entity\\Features\\EmailCredential  MsgPhp\\User\\Entity\\Features\\EmailPasswordCredential  MsgPhp\\User\\Entity\\Features\\EmailSaltedPasswordCredential  MsgPhp\\User\\Entity\\Features\\NicknameCredential  MsgPhp\\User\\Entity\\Features\\NicknamePasswordCredential  MsgPhp\\User\\Entity\\Features\\NicknameSaltedPasswordCredential  MsgPhp\\User\\Entity\\Features\\ResettablePassword  MsgPhp\\User\\Entity\\Features\\TokenCredential", 
            "title": "Features"
        }, 
        {
            "location": "/reference/entities/#msgphpuser-eav", 
            "text": "", 
            "title": "msgphp/user-eav"
        }, 
        {
            "location": "/reference/entities/#entities_3", 
            "text": "MsgPhp\\User\\Entity\\UserAttributeValue", 
            "title": "Entities"
        }, 
        {
            "location": "/reference/entities/#fields_3", 
            "text": "MsgPhp\\User\\Entity\\Fields\\AttributeValuesField", 
            "title": "Fields"
        }, 
        {
            "location": "/reference/entities/#features_3", 
            "text": "No features available", 
            "title": "Features"
        }, 
        {
            "location": "/reference/repositories/", 
            "text": "Repositories\n\n\nReference of available \nrepositories\n per domain.\n\n\n\n\n\nmsgphp/eav\n\n\n\n\nMsgPhp\\Eav\\Repository\\AttributeRepositoryInterface\n\n\n\n\nmsgphp/user\n\n\n\n\nMsgPhp\\User\\Repository\\RoleRepositoryInterface\n\n\nMsgPhp\\User\\Repository\\UserEmailRepositoryInterface\n\n\nMsgPhp\\User\\Repository\\UserRepositoryInterface\n\n\nMsgPhp\\User\\Repository\\UserRoleRepositoryInterface\n\n\nMsgPhp\\User\\Repository\\UsernameRepositoryInterface\n\n\n\n\nmsgphp/user-eav\n\n\n\n\nMsgPhp\\User\\Repository\\UserAttributeValueRepositoryInterface", 
            "title": "Repositories"
        }, 
        {
            "location": "/reference/repositories/#repositories", 
            "text": "Reference of available  repositories  per domain.", 
            "title": "Repositories"
        }, 
        {
            "location": "/reference/repositories/#msgphpeav", 
            "text": "MsgPhp\\Eav\\Repository\\AttributeRepositoryInterface", 
            "title": "msgphp/eav"
        }, 
        {
            "location": "/reference/repositories/#msgphpuser", 
            "text": "MsgPhp\\User\\Repository\\RoleRepositoryInterface  MsgPhp\\User\\Repository\\UserEmailRepositoryInterface  MsgPhp\\User\\Repository\\UserRepositoryInterface  MsgPhp\\User\\Repository\\UserRoleRepositoryInterface  MsgPhp\\User\\Repository\\UsernameRepositoryInterface", 
            "title": "msgphp/user"
        }, 
        {
            "location": "/reference/repositories/#msgphpuser-eav", 
            "text": "MsgPhp\\User\\Repository\\UserAttributeValueRepositoryInterface", 
            "title": "msgphp/user-eav"
        }, 
        {
            "location": "/reference/messages/", 
            "text": "Messages\n\n\nReference of available messages per domain that can be dispatched using a \nmessage bus\n.\n\n\n\n\n\nmsgphp/domain\n\n\nCommands\n\n\n\n\nMsgPhp\\Domain\\Command\\DeleteProjectionDocumentCommand\n\n\nMsgPhp\\Domain\\Command\\SaveProjectionDocumentCommand\n\n\n\n\nEvents\n\n\n\n\nMsgPhp\\Domain\\Event\\ProjectionDocumentDeletedEvent\n\n\nMsgPhp\\Domain\\Event\\ProjectionDocumentSavedEvent\n\n\n\n\nmsgphp/eav\n\n\nCommands\n\n\n\n\nMsgPhp\\Eav\\Command\\CreateAttributeCommand\n\n\nMsgPhp\\Eav\\Command\\DeleteAttributeCommand\n\n\n\n\nEvents\n\n\n\n\nMsgPhp\\Eav\\Event\\AttributeCreatedEvent\n\n\nMsgPhp\\Eav\\Event\\AttributeDeletedEvent\n\n\n\n\nmsgphp/user\n\n\nCommands\n\n\n\n\nMsgPhp\\User\\Command\\AddUserEmailCommand\n\n\nMsgPhp\\User\\Command\\AddUserRoleCommand\n\n\nMsgPhp\\User\\Command\\ChangeUserCredentialCommand\n\n\nMsgPhp\\User\\Command\\ConfirmUserCommand\n\n\nMsgPhp\\User\\Command\\ConfirmUserEmailCommand\n\n\nMsgPhp\\User\\Command\\CreateRoleCommand\n\n\nMsgPhp\\User\\Command\\CreateUserCommand\n\n\nMsgPhp\\User\\Command\\DeleteRoleCommand\n\n\nMsgPhp\\User\\Command\\DeleteUserCommand\n\n\nMsgPhp\\User\\Command\\DeleteUserEmailCommand\n\n\nMsgPhp\\User\\Command\\DeleteUserRoleCommand\n\n\nMsgPhp\\User\\Command\\DisableUserCommand\n\n\nMsgPhp\\User\\Command\\EnableUserCommand\n\n\nMsgPhp\\User\\Command\\RequestUserPasswordCommand\n\n\n\n\nEvents\n\n\n\n\nMsgPhp\\User\\Event\\RoleCreatedEvent\n\n\nMsgPhp\\User\\Event\\RoleDeletedEvent\n\n\nMsgPhp\\User\\Event\\UserConfirmedEvent\n\n\nMsgPhp\\User\\Event\\UserCreatedEvent\n\n\nMsgPhp\\User\\Event\\UserCredentialChangedEvent\n\n\nMsgPhp\\User\\Event\\UserDeletedEvent\n\n\nMsgPhp\\User\\Event\\UserDisabledEvent\n\n\nMsgPhp\\User\\Event\\UserEmailAddedEvent\n\n\nMsgPhp\\User\\Event\\UserEmailConfirmedEvent\n\n\nMsgPhp\\User\\Event\\UserEmailDeletedEvent\n\n\nMsgPhp\\User\\Event\\UserEnabledEvent\n\n\nMsgPhp\\User\\Event\\UserPasswordRequestedEvent\n\n\nMsgPhp\\User\\Event\\UserRoleAddedEvent\n\n\nMsgPhp\\User\\Event\\UserRoleDeletedEvent\n\n\n\n\nmsgphp/user-eav\n\n\nCommands\n\n\n\n\nMsgPhp\\User\\Command\\AddUserAttributeValueCommand\n\n\nMsgPhp\\User\\Command\\ChangeUserAttributeValueCommand\n\n\nMsgPhp\\User\\Command\\DeleteUserAttributeValueCommand\n\n\n\n\nEvents\n\n\n\n\nMsgPhp\\User\\Event\\UserAttributeValueAddedEvent\n\n\nMsgPhp\\User\\Event\\UserAttributeValueChangedEvent\n\n\nMsgPhp\\User\\Event\\UserAttributeValueDeletedEvent", 
            "title": "Messages"
        }, 
        {
            "location": "/reference/messages/#messages", 
            "text": "Reference of available messages per domain that can be dispatched using a  message bus .", 
            "title": "Messages"
        }, 
        {
            "location": "/reference/messages/#msgphpdomain", 
            "text": "", 
            "title": "msgphp/domain"
        }, 
        {
            "location": "/reference/messages/#commands", 
            "text": "MsgPhp\\Domain\\Command\\DeleteProjectionDocumentCommand  MsgPhp\\Domain\\Command\\SaveProjectionDocumentCommand", 
            "title": "Commands"
        }, 
        {
            "location": "/reference/messages/#events", 
            "text": "MsgPhp\\Domain\\Event\\ProjectionDocumentDeletedEvent  MsgPhp\\Domain\\Event\\ProjectionDocumentSavedEvent", 
            "title": "Events"
        }, 
        {
            "location": "/reference/messages/#msgphpeav", 
            "text": "", 
            "title": "msgphp/eav"
        }, 
        {
            "location": "/reference/messages/#commands_1", 
            "text": "MsgPhp\\Eav\\Command\\CreateAttributeCommand  MsgPhp\\Eav\\Command\\DeleteAttributeCommand", 
            "title": "Commands"
        }, 
        {
            "location": "/reference/messages/#events_1", 
            "text": "MsgPhp\\Eav\\Event\\AttributeCreatedEvent  MsgPhp\\Eav\\Event\\AttributeDeletedEvent", 
            "title": "Events"
        }, 
        {
            "location": "/reference/messages/#msgphpuser", 
            "text": "", 
            "title": "msgphp/user"
        }, 
        {
            "location": "/reference/messages/#commands_2", 
            "text": "MsgPhp\\User\\Command\\AddUserEmailCommand  MsgPhp\\User\\Command\\AddUserRoleCommand  MsgPhp\\User\\Command\\ChangeUserCredentialCommand  MsgPhp\\User\\Command\\ConfirmUserCommand  MsgPhp\\User\\Command\\ConfirmUserEmailCommand  MsgPhp\\User\\Command\\CreateRoleCommand  MsgPhp\\User\\Command\\CreateUserCommand  MsgPhp\\User\\Command\\DeleteRoleCommand  MsgPhp\\User\\Command\\DeleteUserCommand  MsgPhp\\User\\Command\\DeleteUserEmailCommand  MsgPhp\\User\\Command\\DeleteUserRoleCommand  MsgPhp\\User\\Command\\DisableUserCommand  MsgPhp\\User\\Command\\EnableUserCommand  MsgPhp\\User\\Command\\RequestUserPasswordCommand", 
            "title": "Commands"
        }, 
        {
            "location": "/reference/messages/#events_2", 
            "text": "MsgPhp\\User\\Event\\RoleCreatedEvent  MsgPhp\\User\\Event\\RoleDeletedEvent  MsgPhp\\User\\Event\\UserConfirmedEvent  MsgPhp\\User\\Event\\UserCreatedEvent  MsgPhp\\User\\Event\\UserCredentialChangedEvent  MsgPhp\\User\\Event\\UserDeletedEvent  MsgPhp\\User\\Event\\UserDisabledEvent  MsgPhp\\User\\Event\\UserEmailAddedEvent  MsgPhp\\User\\Event\\UserEmailConfirmedEvent  MsgPhp\\User\\Event\\UserEmailDeletedEvent  MsgPhp\\User\\Event\\UserEnabledEvent  MsgPhp\\User\\Event\\UserPasswordRequestedEvent  MsgPhp\\User\\Event\\UserRoleAddedEvent  MsgPhp\\User\\Event\\UserRoleDeletedEvent", 
            "title": "Events"
        }, 
        {
            "location": "/reference/messages/#msgphpuser-eav", 
            "text": "", 
            "title": "msgphp/user-eav"
        }, 
        {
            "location": "/reference/messages/#commands_3", 
            "text": "MsgPhp\\User\\Command\\AddUserAttributeValueCommand  MsgPhp\\User\\Command\\ChangeUserAttributeValueCommand  MsgPhp\\User\\Command\\DeleteUserAttributeValueCommand", 
            "title": "Commands"
        }, 
        {
            "location": "/reference/messages/#events_3", 
            "text": "MsgPhp\\User\\Event\\UserAttributeValueAddedEvent  MsgPhp\\User\\Event\\UserAttributeValueChangedEvent  MsgPhp\\User\\Event\\UserAttributeValueDeletedEvent", 
            "title": "Events"
        }, 
        {
            "location": "/reference/domain-events/", 
            "text": "Domain Events\n\n\nReference of available \ndomain events\n per domain.\n\n\n\n\n\nmsgphp/domain\n\n\n\n\nMsgPhp\\Domain\\Event\\ConfirmEvent\n\n\nMsgPhp\\Domain\\Event\\DisableEvent\n\n\nMsgPhp\\Domain\\Event\\EnableEvent\n\n\n\n\nmsgphp/user\n\n\n\n\nMsgPhp\\User\\Event\\Domain\\ChangeCredentialEvent\n\n\nMsgPhp\\User\\Event\\Domain\\RequestPasswordEvent", 
            "title": "Domain Events"
        }, 
        {
            "location": "/reference/domain-events/#domain-events", 
            "text": "Reference of available  domain events  per domain.", 
            "title": "Domain Events"
        }, 
        {
            "location": "/reference/domain-events/#msgphpdomain", 
            "text": "MsgPhp\\Domain\\Event\\ConfirmEvent  MsgPhp\\Domain\\Event\\DisableEvent  MsgPhp\\Domain\\Event\\EnableEvent", 
            "title": "msgphp/domain"
        }, 
        {
            "location": "/reference/domain-events/#msgphpuser", 
            "text": "MsgPhp\\User\\Event\\Domain\\ChangeCredentialEvent  MsgPhp\\User\\Event\\Domain\\RequestPasswordEvent", 
            "title": "msgphp/user"
        }, 
        {
            "location": "/reference/doctrine-identifier-types/", 
            "text": "Doctrine Identifier Types\n\n\nReference of available \nDoctrine identifier types\n per\ndomain.\n\n\n\n\n\nmsgphp/domain\n\n\n\n\n\n\n\n\nType name\n\n\nType class\n\n\n\n\n\n\n\n\n\n\nmsgphp_domain_id\n\n\nMsgPhp\\Domain\\Infra\\Doctrine\\DomainIdType\n\n\n\n\n\n\n\n\nmsgphp/eav\n\n\n\n\n\n\n\n\nType name\n\n\nType class\n\n\n\n\n\n\n\n\n\n\nmsgphp_attribute_id\n\n\nMsgPhp\\Eav\\Infra\\Doctrine\\Type\\AttributeIdType\n\n\n\n\n\n\nmsgphp_attribute_value_id\n\n\nMsgPhp\\Eav\\Infra\\Doctrine\\Type\\AttributeValueIdType\n\n\n\n\n\n\n\n\nmsgphp/user\n\n\n\n\n\n\n\n\nType name\n\n\nType class\n\n\n\n\n\n\n\n\n\n\nmsgphp_user_id\n\n\nMsgPhp\\User\\Infra\\Doctrine\\Type\\UserIdType", 
            "title": "Doctrine Identifier Types"
        }, 
        {
            "location": "/reference/doctrine-identifier-types/#doctrine-identifier-types", 
            "text": "Reference of available  Doctrine identifier types  per\ndomain.", 
            "title": "Doctrine Identifier Types"
        }, 
        {
            "location": "/reference/doctrine-identifier-types/#msgphpdomain", 
            "text": "Type name  Type class      msgphp_domain_id  MsgPhp\\Domain\\Infra\\Doctrine\\DomainIdType", 
            "title": "msgphp/domain"
        }, 
        {
            "location": "/reference/doctrine-identifier-types/#msgphpeav", 
            "text": "Type name  Type class      msgphp_attribute_id  MsgPhp\\Eav\\Infra\\Doctrine\\Type\\AttributeIdType    msgphp_attribute_value_id  MsgPhp\\Eav\\Infra\\Doctrine\\Type\\AttributeValueIdType", 
            "title": "msgphp/eav"
        }, 
        {
            "location": "/reference/doctrine-identifier-types/#msgphpuser", 
            "text": "Type name  Type class      msgphp_user_id  MsgPhp\\User\\Infra\\Doctrine\\Type\\UserIdType", 
            "title": "msgphp/user"
        }
    ]
}